{"version":3,"sources":["components/helpers/BackButton.tsx","components/helpers/PanelHeader.tsx","components/panels/Home.tsx","core/ApiService.ts","core/model-utils.ts","core/tcomb-types.ts","core/user-model.ts","components/AppService.ts","models/question-model.ts","models/game-model.ts","components/panels/BattleService.ts","components/Question.tsx","Utils.ts","components/panels/battle-reducer.ts","components/helpers/Loader.tsx","components/panels/Battle.tsx","components/panels/Results.tsx","core/tracker.ts","components/App.tsx","components/ErrorBoundary.tsx","index.tsx"],"names":["BackButton","platform","IOS","PanelHeader","panelHeaderProps","onBackButtonClick","text","showBackButton","vkPanelHeaderProps","left","onClick","undefined","defaultProps","Home","id","onStartBattle","fetchedUser","before","photoUrl","src","description","score","firstName","lastName","size","ApiService","url","data","sendToken","expand","Model","send","convertDataToBackendFormat","method","urlParams","URLSearchParams","expandString","castArray","join","append","options","headers","createHeaders","mode","body","JSON","stringify","timeout","fetch","createFullUrl","response","processResponse","Accept","Authorization","getAuthorizationHeader","queryString","window","location","search","slice","relativeUrl","queryParams","domain","removeTrailingSlash","process","String","status","Error","json","ok","detail","convertDataToFrontendFormat","toSnake","camelCased","toCamel","fromObject","endsWith","getFromObject","object","fromJSON","set","key","value","this","constructor","update","$set","createModel","attributes","name","struct","strict","prototype","Null","irreducible","PositiveNumber","refinement","tcomb","Number","n","ID","User","vkId","AppService","promises","bridge","get","Promise","all","vkUserData","apiUserData","first_name","last_name","photo_200","Question","questionWord","answerWords","list","correctAnswer","union","selectedAnswer","isCorrect","Boolean","expandableQuestion","dispatch","x","Game","questions","points","BattleService","post","question","patch","onSelectAnswer","map","answer","isCorrectAnswer","isFailure","classes","clsx","correct","failure","stretched","className","Utils","time","res","setTimeout","isProductionMode","battleActions","initialState","battle","activeQuestion","hasNextQuestion","battleReducer","state","action","type","payload","length","updatedQuestion","currentQuestions","questionIndex","findIndex","activeQuestionIndex","newQuestionIndex","Loader","delay","render","useState","pastDelay","setPastDelay","useEffect","timerId","clearTimeout","propTypes","PropTypes","number","func","Battle","panelId","onGoBack","onFinishGame","loading","setLoading","useReducer","a","startBattle","fetchedBattle","questionToSubmit","submitQuestion","questionWithAnswerData","waitForTimeout","user","Results","onRetry","correctAnswersNumber","filter","incorrectAnswersNumber","header","indicator","LocalTracker","console","log","MetrikaTracker","m","e","t","k","document","push","arguments","l","Date","createElement","getElementsByTagName","async","parentNode","insertBefore","ym","clickmap","trackLinks","accurateTrackBounce","webvisor","warn","tracker","initialized","reachGoal","App","activePanel","setActivePanel","setUser","popout","setPopout","setBattle","Sentry","dsn","beforeSend","event","hint","exception","errorMessage","originalException","message","actions","title","autoclose","onClose","init","fetchUserData","fetchData","localBattle","getBattle","updatedBattle","goBack","ErrorBoundary","children","fallback","error","componentStack","resetError","subscribe","schemeAttribute","createAttribute","scheme","setNamedItem","renderReact","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.12c85b9b.chunk.js","sourcesContent":["import React from 'react'\nimport { IOS, platform } from '@vkontakte/vkui/'\nimport Icon24Back from '@vkontakte/icons/dist/24/back'\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back'\n\nfunction BackButton(): JSX.Element {\n  const osName = platform()\n  if (osName === IOS) return <Icon28ChevronBack />\n  return <Icon24Back />\n}\n\nexport default BackButton\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport {\n  PanelHeaderButton,\n  PanelHeader as VKPanelHeader,\n} from '@vkontakte/vkui'\nimport BackButton from './BackButton'\n\nexport default function PanelHeader({\n  panelHeaderProps,\n  onBackButtonClick,\n  text,\n  showBackButton,\n}: InferProps<typeof PanelHeader.propTypes>): JSX.Element {\n  const vkPanelHeaderProps = { ...panelHeaderProps }\n  if (showBackButton)\n    vkPanelHeaderProps.left = (\n      <PanelHeaderButton onClick={onBackButtonClick}>\n        <BackButton />\n      </PanelHeaderButton>\n    )\n  else vkPanelHeaderProps.left = undefined\n  return <VKPanelHeader {...vkPanelHeaderProps}>{text}</VKPanelHeader>\n}\n\nPanelHeader.propTypes = {\n  onBackButtonClick: PropTypes.func,\n  text: PropTypes.string.isRequired,\n  panelHeaderProps: PropTypes.shape({\n    left: PropTypes.node,\n  }),\n  showBackButton: PropTypes.bool,\n}\n\nPanelHeader.defaultProps = {\n  panelHeaderProps: {},\n  showBackButton: true,\n  onBackButtonClick: () => {},\n}\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport Group from '@vkontakte/vkui/dist/components/Group/Group'\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell'\nimport Div from '@vkontakte/vkui/dist/components/Div/Div'\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar'\nimport PanelHeader from '../helpers/PanelHeader'\n\nconst Home = ({\n  id,\n  onStartBattle,\n  fetchedUser,\n}: InferProps<typeof Home.propTypes>): JSX.Element => (\n  <Panel id={id}>\n    <PanelHeader text=\"English Puzzle\" showBackButton={false} />\n    {fetchedUser && (\n      <Group>\n        <Cell\n          before={\n            fetchedUser.photoUrl ? <Avatar src={fetchedUser.photoUrl} /> : null\n          }\n          description={`Количество очков - ${fetchedUser.score}`}\n        >\n          {`${fetchedUser.firstName} ${fetchedUser.lastName}`}\n        </Cell>\n      </Group>\n    )}\n\n    <Group>\n      <Div>\n        <Button size=\"xl\" onClick={onStartBattle}>\n          Начать!\n        </Button>\n      </Div>\n    </Group>\n  </Panel>\n)\n\nHome.propTypes = {\n  id: PropTypes.string.isRequired,\n  onStartBattle: PropTypes.func.isRequired,\n  fetchedUser: PropTypes.shape({\n    photoUrl: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n  }),\n}\n\nHome.defaultProps = {\n  fetchedUser: null,\n}\n\nexport default Home\n","import { timeout } from 'promise-timeout'\nimport { toCamel, toSnake } from 'convert-keys'\nimport castArray from 'lodash.castarray'\nimport { ModelType } from './model-utils'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\ntype Data = Record<string, unknown>\n\nexport class ApiService {\n  static async post<T>(\n    url: string,\n    data: Data,\n    { sendToken = true, expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      data: ApiService.convertDataToBackendFormat(data),\n      sendToken,\n      method: 'POST',\n      expand,\n      Model,\n    })\n  }\n\n  static async patch<T>(\n    url: string,\n    data: Data,\n    { sendToken = true, expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      data: ApiService.convertDataToBackendFormat(data),\n      sendToken,\n      method: 'PATCH',\n      expand,\n      Model,\n    })\n  }\n\n  static async get<T>(\n    url: string,\n    { expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      sendToken: true,\n      method: 'GET',\n      expand,\n      Model,\n    })\n  }\n\n  static async send<T>(\n    url: string,\n    {\n      data,\n      sendToken,\n      method,\n      expand,\n      Model = null,\n    }: {\n      data?: Data\n      sendToken: boolean\n      method: string\n      expand?: string\n      Model?: ModelType<unknown>\n    }\n  ): Promise<T> {\n    const urlParams = new URLSearchParams()\n    if (expand) {\n      const expandString = castArray(expand).join(',')\n      urlParams.append('expand', expandString)\n    }\n    const options: RequestInit = {\n      headers: ApiService.createHeaders({ sendToken }),\n    }\n    if (method !== 'GET') {\n      options.mode = 'cors'\n      options.body = JSON.stringify(data)\n    }\n    options.method = method\n    const response = await timeout(\n      fetch(ApiService.createFullUrl(url, urlParams), options),\n      10000\n    )\n    return ApiService.processResponse<T>(response, Model)\n  }\n\n  static createHeaders({\n    sendToken,\n  }: { sendToken?: boolean } = {}): HeadersInit {\n    const headers: HeadersInit = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    }\n    if (sendToken) {\n      headers.Authorization = ApiService.getAuthorizationHeader()\n    }\n    return headers\n  }\n\n  static getAuthorizationHeader(): string {\n    const queryString = window.location.search.slice(1)\n    return `QueryString ${queryString}`\n  }\n\n  static createFullUrl(\n    relativeUrl: string,\n    queryParams: URLSearchParams\n  ): string {\n    const domain = ApiService.removeTrailingSlash(API_URL)\n    let url = `${domain}/${relativeUrl}`\n    if (queryParams && String(queryParams)) {\n      url += `?${String(queryParams)}`\n    }\n    return url\n  }\n\n  static async processResponse<T>(\n    response: Response,\n    Model: ModelType<unknown> = null\n  ): Promise<T> {\n    if (response.status >= 500 && response.status < 600) {\n      throw new Error('Внутренняя ошибка сервера')\n    }\n    let json: {\n      detail?: string\n    }\n    try {\n      json = await response.json()\n    } catch (e) {\n      throw new Error('Неверный ответ сервера')\n    }\n    if (!response.ok) {\n      if (json.detail) {\n        throw new Error(json.detail)\n      }\n      throw new Error('Неизвестная ошибка приложения')\n    }\n    return ApiService.convertDataToFrontendFormat<T>(json, Model)\n  }\n\n  static convertDataToBackendFormat(data: Data): Data {\n    return toSnake(data)\n  }\n\n  static convertDataToFrontendFormat<T>(data: Data, Model = null): T {\n    const camelCased: T = toCamel(data)\n    if (Model) {\n      return Model.fromObject(camelCased)\n    }\n    return camelCased\n  }\n\n  static removeTrailingSlash(url: string): string {\n    return url.endsWith('/') ? url.slice(0, -1) : url\n  }\n}\n","import fromJSON from 'tcomb/lib/fromJSON'\nimport { Struct, struct, StructProps } from 'tcomb'\n\nfunction getFromObject<T>(Model: ModelType<T>) {\n  return function fromObject(object: Record<string, unknown>) {\n    return fromJSON<T>(object, Model)\n  }\n}\n\nfunction set(key: string, value: unknown) {\n  return this.constructor.update(this, {\n    [key]: {\n      $set: value,\n    },\n  })\n}\n\nexport interface ModelType<T> extends Struct<T> {\n  fromObject(object: Record<string, unknown>): T\n}\n\nexport interface ModelInstance {\n  set(key: string, value: unknown): this\n}\n\nexport function createModel<T>(\n  attributes: StructProps,\n  name: string,\n  defaultProps = {}\n): ModelType<T> {\n  // @ts-ignore\n  const Model: ModelType<T> = struct(attributes, {\n    strict: true,\n    name,\n    defaultProps,\n  })\n\n  Model.fromObject = getFromObject<T>(Model)\n  Model.prototype.set = set\n\n  return Model\n}\n\nexport function extendModel<T>(\n  baseClass: ModelType<Record<string, unknown>>,\n  props: StructProps,\n  name: string\n): ModelType<T> {\n  // @ts-ignore\n  const Model: ModelType<T> = baseClass.extend(props, name)\n\n  Model.fromObject = getFromObject<T>(Model)\n  Model.prototype.set = set\n\n  return Model\n}\n","import tcomb, { irreducible, refinement } from 'tcomb'\n\nexport const Null = irreducible('Null', (value) => value === null)\n\nexport const PositiveNumber = refinement(\n  tcomb.Number,\n  (n) => n >= 0,\n  'PositiveNumber'\n)\n\nexport const ID = refinement(tcomb.Number, (n) => n >= 1, 'ID')\n","import { createModel, ModelInstance } from './model-utils'\nimport tcomb from 'tcomb'\nimport { ID, PositiveNumber } from './tcomb-types'\n\nconst attributes = {\n  id: ID,\n  vkId: ID,\n  firstName: tcomb.String,\n  lastName: tcomb.String,\n  photoUrl: tcomb.String,\n  score: PositiveNumber,\n}\n\nexport interface UserInstance extends ModelInstance {\n  id: number\n  vkId: number\n  firstName: string\n  lastName: string\n  photoUrl: string\n  score: number\n}\n\nexport class User extends createModel<UserInstance>(attributes, 'User') {}\n","import bridge, { UserInfo } from '@vkontakte/vk-bridge'\nimport { ApiService } from '../core/ApiService'\nimport { User, UserInstance } from '../core/user-model'\n\ntype ApiUserInfo = { id: number; vkId: number; score: number }\n\nexport class AppService {\n  static async fetchUserData(): Promise<UserInstance> {\n    const promises: [Promise<UserInfo>, Promise<ApiUserInfo>] = [\n      bridge.send('VKWebAppGetUserInfo'),\n      ApiService.get<ApiUserInfo>('user'),\n    ]\n    const [vkUserData, apiUserData] = await Promise.all(promises)\n    return User.fromObject({\n      id: apiUserData.id,\n      vkId: apiUserData.vkId,\n      firstName: vkUserData.first_name,\n      lastName: vkUserData.last_name,\n      photoUrl: vkUserData.photo_200,\n      score: apiUserData.score,\n    })\n  }\n}\n","import { createModel, ModelInstance } from '../core/model-utils'\nimport tcomb from 'tcomb'\nimport { ID, Null } from '../core/tcomb-types'\n\nconst attributes = {\n  id: ID,\n  questionWord: tcomb.String,\n  answerWords: tcomb.list(tcomb.String),\n  correctAnswer: tcomb.union([Null, tcomb.String]),\n  selectedAnswer: tcomb.union([Null, tcomb.String]),\n  isCorrect: tcomb.Boolean,\n}\n\nexport interface QuestionInstance extends ModelInstance {\n  id: number\n  questionWord: string\n  answerWords: string[]\n  correctAnswer: null | string\n  selectedAnswer: null | string\n  isCorrect: boolean\n}\n\nexport class Question extends createModel<QuestionInstance>(\n  attributes,\n  'Question'\n) {}\n","import { createModel, ModelInstance } from '../core/model-utils'\nimport tcomb from 'tcomb'\nimport { Question, QuestionInstance } from './question-model'\nimport { ID } from '../core/tcomb-types'\n\nconst expandableQuestion = tcomb.union([Question, tcomb.Number])\nexpandableQuestion.dispatch = (x) => {\n  if (typeof x === 'number') return tcomb.Number\n  return Question\n}\n\nconst attributes = {\n  id: ID,\n  questions: tcomb.list(expandableQuestion),\n  points: tcomb.Number,\n}\n\nexport interface GameInstance extends ModelInstance {\n  id: number\n  questions: QuestionInstance[]\n  points: number\n}\n\nexport class Game extends createModel<GameInstance>(attributes, 'Game') {}\n","import { ApiService } from '../../core/ApiService'\nimport { Game, GameInstance } from '../../models/game-model'\nimport { Question, QuestionInstance } from '../../models/question-model'\n\nexport class BattleService {\n  static async startBattle(): Promise<GameInstance> {\n    return ApiService.post('game', {}, { expand: 'questions', Model: Game })\n  }\n\n  static async submitQuestion(\n    question: QuestionInstance\n  ): Promise<QuestionInstance> {\n    return ApiService.patch(\n      `question/${question.id}`,\n      {\n        selectedAnswer: question.selectedAnswer,\n      },\n      { Model: Question }\n    )\n  }\n\n  static async getBattle(id: number): Promise<GameInstance> {\n    return ApiService.get(`game/${id}`, { expand: 'questions', Model: Game })\n  }\n}\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport Div from '@vkontakte/vkui/dist/components/Div/Div'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport './Question.css'\nimport clsx from 'clsx'\n\nfunction Question({\n  questionWord,\n  answerWords,\n  selectedAnswer,\n  isCorrect,\n  correctAnswer,\n  onSelectAnswer,\n}: InferProps<typeof Question.propTypes>): JSX.Element {\n  return (\n    <Div>\n      <p>Слово на английском: {questionWord}</p>\n      <p> Выбери его перевод на русский:</p>\n      {answerWords.map((answer) => {\n        const isCorrectAnswer = answer === correctAnswer\n        const isFailure = !isCorrect && answer === selectedAnswer\n        const classes = clsx('answer-button', {\n          correct: isCorrectAnswer,\n          failure: isFailure,\n        })\n        return (\n          <Button\n            key={answer}\n            size=\"xl\"\n            mode=\"primary\"\n            stretched\n            className={classes}\n            onClick={() => !selectedAnswer && onSelectAnswer(answer)}\n          >\n            {answer}\n          </Button>\n        )\n      })}\n    </Div>\n  )\n}\n\nQuestion.propTypes = {\n  questionWord: PropTypes.string.isRequired,\n  answerWords: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selectedAnswer: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  correctAnswer: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  isCorrect: PropTypes.bool,\n  onSelectAnswer: PropTypes.func.isRequired,\n}\n\nQuestion.defaultProps = {\n  correctAnswer: null,\n  selectedAnswer: null,\n  isCorrect: false,\n}\n\nexport default Question\n","export class Utils {\n  static isProductionMode = process.env.NODE_ENV === 'production'\n\n  static async waitForTimeout(time: number): Promise<void> {\n    await new Promise((res) => setTimeout(res, time))\n  }\n}\n","import { GameInstance } from '../../models/game-model'\nimport { QuestionInstance } from '../../models/question-model'\n\nexport const battleActions = {\n  setBattle: 'setBattle',\n  updateQuestion: 'updateQuestion',\n  goToNextQuestion: 'goToNextQuestion',\n}\n\nexport const initialState = {\n  battle: null,\n  activeQuestion: null,\n  hasNextQuestion: false,\n}\n\nexport function battleReducer(\n  state = initialState,\n  action: {\n    type: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    payload?: any\n  }\n): {\n  battle: null | GameInstance\n  activeQuestion: null | QuestionInstance\n  hasNextQuestion: boolean\n} {\n  switch (action.type) {\n    case battleActions.setBattle: {\n      const battle = action.payload\n      const { questions } = battle\n      return {\n        ...state,\n        battle,\n        activeQuestion: questions[0],\n        hasNextQuestion: questions.length > 1,\n      }\n    }\n    case battleActions.updateQuestion: {\n      const updatedQuestion = action.payload\n      const currentQuestions = state.battle.questions\n      const questionIndex = currentQuestions.findIndex(\n        ({ id }) => id === updatedQuestion.id\n      )\n      const questions = [\n        ...currentQuestions.slice(0, questionIndex),\n        updatedQuestion,\n        ...currentQuestions.slice(questionIndex + 1),\n      ]\n      return {\n        ...state,\n        battle: {\n          ...state.battle,\n          questions,\n        },\n        activeQuestion: updatedQuestion,\n      }\n    }\n    case battleActions.goToNextQuestion: {\n      const currentQuestions = state.battle.questions\n      const activeQuestionIndex = currentQuestions.findIndex(\n        ({ id }) => id === state.activeQuestion.id\n      )\n      if (activeQuestionIndex === currentQuestions.length - 1) {\n        throw new Error('Вы уже на последнем вопросе')\n      }\n      const newQuestionIndex = activeQuestionIndex + 1\n      return {\n        ...state,\n        activeQuestion: currentQuestions[newQuestionIndex],\n        hasNextQuestion: newQuestionIndex < currentQuestions.length - 1,\n      }\n    }\n    default:\n      return state\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { PanelSpinner } from '@vkontakte/vkui'\n\nfunction Loader({\n  delay,\n  render,\n}: InferProps<typeof Loader.propTypes>): JSX.Element {\n  const [pastDelay, setPastDelay] = useState(false)\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      setPastDelay(true)\n    }, delay)\n    return () => {\n      clearTimeout(timerId)\n    }\n  }, [delay])\n\n  if (pastDelay) return render()\n  return null\n}\n\nLoader.propTypes = {\n  delay: PropTypes.number,\n  render: PropTypes.func,\n}\n\nLoader.defaultProps = {\n  delay: 200,\n  render: () => <PanelSpinner size=\"large\" />,\n}\n\nexport default Loader\n","import React, { useEffect, useReducer, useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel'\nimport PanelHeader from '../helpers/PanelHeader'\nimport { BattleService } from './BattleService'\nimport Question from '../Question'\nimport { Utils } from '../../Utils'\nimport { battleActions, battleReducer, initialState } from './battle-reducer'\nimport Loader from '../helpers/Loader'\n\nconst WAIT_TIME_TO_SHOW_CORRECT_ANSWER = 1000\n\nconst Battle = ({\n  id: panelId,\n  onGoBack,\n  onFinishGame,\n}: InferProps<typeof Battle.propTypes>): JSX.Element => {\n  const [loading, setLoading] = useState(false)\n  const [state, dispatch] = useReducer(battleReducer, initialState)\n  const { battle, activeQuestion, hasNextQuestion } = state\n\n  useEffect(() => {\n    const startBattle = async () => {\n      setLoading(true)\n      try {\n        const fetchedBattle = await BattleService.startBattle()\n        dispatch({\n          type: battleActions.setBattle,\n          payload: fetchedBattle,\n        })\n      } finally {\n        setLoading(false)\n      }\n    }\n    startBattle()\n  }, [])\n\n  const onSelectAnswer = async (answer) => {\n    const questionToSubmit = activeQuestion.set('selectedAnswer', answer)\n    setLoading(true)\n    try {\n      const questionWithAnswerData = await BattleService.submitQuestion(\n        questionToSubmit\n      )\n      dispatch({\n        type: battleActions.updateQuestion,\n        payload: questionWithAnswerData,\n      })\n    } finally {\n      setLoading(false)\n    }\n\n    await Utils.waitForTimeout(WAIT_TIME_TO_SHOW_CORRECT_ANSWER)\n\n    if (hasNextQuestion) dispatch({ type: battleActions.goToNextQuestion })\n    else onFinishGame(battle)\n  }\n\n  return (\n    <Panel id={panelId}>\n      <PanelHeader onBackButtonClick={onGoBack} text=\"Игра\" />\n      {activeQuestion && (\n        <Question {...activeQuestion} onSelectAnswer={onSelectAnswer} />\n      )}\n      {loading && <Loader />}\n    </Panel>\n  )\n}\n\nBattle.propTypes = {\n  id: PropTypes.string.isRequired,\n  onGoBack: PropTypes.func.isRequired,\n  onFinishGame: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    photoUrl: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n  }),\n}\n\nBattle.defaultProps = {\n  user: null,\n}\n\nexport default Battle\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel'\nimport PanelHeader from '../helpers/PanelHeader'\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell'\nimport Counter from '@vkontakte/vkui/dist/components/Counter/Counter'\nimport Group from '@vkontakte/vkui/dist/components/Group/Group'\nimport Header from '@vkontakte/vkui/dist/components/Header/Header'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport './Results.css'\nimport Icon24Home from '@vkontakte/icons/dist/24/home'\nimport Icon24Replay from '@vkontakte/icons/dist/24/replay'\n\nfunction Results({\n  id,\n  onGoBack,\n  battle,\n  onRetry,\n}: InferProps<typeof Results.propTypes>): JSX.Element {\n  const { questions, points } = battle\n  const correctAnswersNumber = questions.filter(({ isCorrect }) => isCorrect)\n    .length\n  const incorrectAnswersNumber = questions.length - correctAnswersNumber\n  return (\n    <Panel id={id}>\n      <PanelHeader text=\"Результаты\" onBackButtonClick={onGoBack} />\n      <Group header={<Header mode=\"secondary\">Статистика</Header>}>\n        <Cell\n          indicator={<Counter mode=\"primary\">{correctAnswersNumber}</Counter>}\n        >\n          Верных ответов:\n        </Cell>\n        <Cell\n          indicator={<Counter mode=\"primary\">{incorrectAnswersNumber}</Counter>}\n        >\n          Неверных ответов:\n        </Cell>\n        <Cell indicator={<Counter mode=\"primary\">{points}</Counter>}>\n          Получено очков:\n        </Cell>\n      </Group>\n      <div className=\"home-button-wrapper\">\n        <Button onClick={onGoBack} size=\"l\" before={<Icon24Home />}>\n          Домой\n        </Button>\n        <Button onClick={onRetry} size=\"l\" before={<Icon24Replay />}>\n          Еще раз\n        </Button>\n      </div>\n    </Panel>\n  )\n}\n\nResults.propTypes = {\n  id: PropTypes.string.isRequired,\n  onGoBack: PropTypes.func.isRequired,\n  onRetry: PropTypes.func.isRequired,\n  battle: PropTypes.shape({\n    points: PropTypes.number.isRequired,\n    questions: PropTypes.arrayOf(\n      PropTypes.shape({\n        isCorrect: PropTypes.bool.isRequired,\n      })\n    ).isRequired,\n  }),\n}\n\nResults.defaultProps = {\n  battle: null,\n}\n\nexport default Results\n","/* eslint-disable class-methods-use-this, no-console */\n// eslint-disable-next-line max-classes-per-file\nimport { Utils } from '../Utils'\n\ninterface TrackerInterface {\n  init: () => void\n  reachGoal: (name: string) => Promise<void>\n}\n\nclass LocalTracker implements TrackerInterface {\n  init() {\n    console.log('Init tracker')\n  }\n\n  async reachGoal(name) {\n    console.log(`Reach goal ${name}`)\n  }\n}\n\nclass MetrikaTracker implements TrackerInterface {\n  init(): void {\n    /* eslint-disable */\n    ;(function(m, e, t, r, i, k, a) {\n      m[i] =\n        m[i] ||\n        function() {\n          ;(m[i].a = m[i].a || []).push(arguments)\n        }\n      // @ts-ignore\n      m[i].l = 1 * new Date()\n      ;(k = e.createElement(t)),\n        (a = e.getElementsByTagName(t)[0]),\n        (k.async = 1),\n        (k.src = r),\n        a.parentNode.insertBefore(k, a)\n    })(window, document, 'script', 'https://mc.yandex.ru/metrika/tag.js', 'ym')\n\n    try {\n      // @ts-ignore\n      ym(70656700, 'init', {\n        clickmap: true,\n        trackLinks: true,\n        accurateTrackBounce: true,\n        webvisor: true,\n      })\n    } catch (e) {\n      console.log('Seems like Yandex metrika is blocked')\n      console.warn(e)\n    }\n    /* eslint-enable */\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  reachGoal(name: string): Promise<void> {\n    return new Promise((res) => {\n      try {\n        // @ts-ignore\n        window.ym(70656700, 'reachGoal', name, () => res())\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('Seems like Yandex metrika is blocked')\n        // eslint-disable-next-line no-console\n        console.warn(e)\n      }\n    })\n  }\n}\n\nconst TrackerClass = Utils.isProductionMode ? MetrikaTracker : LocalTracker\n\nconst tracker = new TrackerClass()\nlet initialized = false\n\nexport function initTracker(): void {\n  if (!initialized) {\n    tracker.init()\n    initialized = true\n  }\n}\n\nexport function reachGoal(name: string): void {\n  if (!initialized) throw new Error('Tracker was not initialized')\n  tracker.reachGoal(name)\n}\n","import React, { useEffect, useState } from 'react'\nimport View from '@vkontakte/vkui/dist/components/View/View'\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner'\nimport Alert from '@vkontakte/vkui/dist/components/Alert/Alert'\nimport '@vkontakte/vkui/dist/vkui.css'\n\nimport Home from './panels/Home'\nimport { AppService } from './AppService'\nimport Battle from './panels/Battle'\nimport './constant-styles.css'\nimport Results from './panels/Results'\nimport { BattleService } from './panels/BattleService'\nimport { Utils } from '../Utils'\nimport * as Sentry from '@sentry/react'\nimport './App.css'\nimport { GameInstance } from '../models/game-model'\nimport { initTracker, reachGoal } from '../core/tracker'\n\nconst App = (): JSX.Element => {\n  const [activePanel, setActivePanel] = useState('home')\n  const [fetchedUser, setUser] = useState(null)\n  const [popout, setPopout] = useState(<ScreenSpinner />)\n  const [battle, setBattle] = useState(null)\n\n  useEffect(() => {\n    if (Utils.isProductionMode) {\n      Sentry.init({\n        dsn: process.env.REACT_APP_SENTRY_DSN,\n        beforeSend(event, hint) {\n          if (event.exception) {\n            const errorMessage =\n              hint &&\n              hint.originalException &&\n              hint.originalException instanceof Error &&\n              hint.originalException.message\n                ? hint.originalException.message\n                : ''\n            setPopout(\n              <Alert\n                actions={[\n                  {\n                    mode: 'default',\n                    title: 'ОК',\n                    autoclose: true,\n                  },\n                ]}\n                onClose={() => setPopout(null)}\n              >\n                <h2>Возникла ошибка =(</h2>\n                {errorMessage && (\n                  <p className=\"error-message\">{errorMessage}</p>\n                )}\n                <p>Попробуй еще раз</p>\n              </Alert>\n            )\n          }\n          return event\n        },\n      })\n    }\n    initTracker()\n  }, [])\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const user = await AppService.fetchUserData()\n        setUser(user)\n      } finally {\n        setPopout(null)\n      }\n    }\n    fetchData()\n  }, [battle])\n\n  const onFinishGame = async (localBattle: GameInstance) => {\n    const updatedBattle = await BattleService.getBattle(localBattle.id)\n    setBattle(updatedBattle)\n    setActivePanel('results')\n    reachGoal('finish-game')\n  }\n\n  const goBack = () => setActivePanel('home')\n\n  const onStartBattle = () => {\n    setActivePanel('battle')\n    reachGoal('start-game')\n  }\n\n  return (\n    <View activePanel={activePanel} popout={popout}>\n      <Home id=\"home\" fetchedUser={fetchedUser} onStartBattle={onStartBattle} />\n      <Battle\n        id=\"battle\"\n        onGoBack={goBack}\n        user={fetchedUser}\n        onFinishGame={onFinishGame}\n      />\n      <Results\n        id=\"results\"\n        onGoBack={goBack}\n        onRetry={onStartBattle}\n        battle={battle}\n      />\n    </View>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Sentry from '@sentry/react'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport { Utils } from '../Utils'\n\n/**\n * Component catches only errors in rendering phase and lifecycle\n * Error in click and async handlers need to be caught and rendered separately\n */\nexport function ErrorBoundary({\n  children,\n}: InferProps<typeof ErrorBoundary.propTypes>): JSX.Element {\n  if (!Utils.isProductionMode) return children\n\n  return (\n    <Sentry.ErrorBoundary\n      fallback={({ error, componentStack, resetError }) => (\n        <>\n          <div>Ошибка отрисовки:</div>\n          <p>{error.message}</p>\n          <p>{componentStack}</p>\n          <Button onClick={resetError}>Попробовать еще раз</Button>\n        </>\n      )}\n    >\n      {children}\n    </Sentry.ErrorBoundary>\n  )\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.element.isRequired,\n}\n","import 'core-js/features/map'\nimport 'core-js/features/set'\nimport React from 'react'\nimport { render as renderReact } from 'react-dom'\nimport bridge from '@vkontakte/vk-bridge'\nimport App from './components/App'\nimport { Utils } from './Utils'\nimport { ErrorBoundary } from './components/ErrorBoundary'\n\n// Init VK  Mini App\nbridge.send('VKWebAppInit')\n\nbridge.subscribe(({ detail: { type, data } }) => {\n  if (type === 'VKWebAppUpdateConfig') {\n    const schemeAttribute = document.createAttribute('scheme')\n    // @ts-ignore\n    schemeAttribute.value = data.scheme || 'client_light'\n    document.body.attributes.setNamedItem(schemeAttribute)\n  }\n})\n\nfunction render() {\n  renderReact(\n    <React.StrictMode>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\nrender()\n\nif (!Utils.isProductionMode) {\n  if (module.hot) {\n    module.hot.accept('./components/App', render)\n  }\n\n  import('./eruda')\n}\n"],"sourceRoot":""}