{"version":3,"sources":["core/ApiService.ts","core/model-utils.ts","core/tcomb-types.ts","core/user-model.ts","components/AppService.ts","Utils.ts","core/tracker.ts","models/question-model.ts","models/game-model.ts","components/panels/BattleService.ts","components/helpers/BackButton.tsx","components/helpers/PanelHeader.tsx","components/panels/Home.tsx","components/Question.tsx","components/panels/battle-reducer.ts","components/helpers/Loader.tsx","components/panels/Battle.tsx","components/panels/Results.tsx","models/scoreboard-user-model.ts","components/panels/ScoreboardItem.tsx","components/panels/ScoreboardHome.tsx","components/App.tsx","components/ErrorBoundary.tsx","index.tsx"],"names":["ApiService","url","data","sendToken","expand","Model","send","convertDataToBackendFormat","method","urlParams","URLSearchParams","expandString","castArray","join","append","options","headers","createHeaders","mode","body","JSON","stringify","timeout","fetch","createFullUrl","response","processResponse","Accept","Authorization","getAuthorizationHeader","queryString","window","location","search","slice","relativeUrl","queryParams","domain","removeTrailingSlash","process","String","status","Error","json","ok","detail","convertDataToFrontendFormat","toSnake","camelCased","toCamel","fromObject","endsWith","getFromObject","object","fromJSON","set","key","value","this","constructor","update","$set","createModel","attributes","name","defaultProps","struct","strict","prototype","Null","irreducible","PositiveNumber","refinement","tcomb","Number","n","ID","User","id","vkId","firstName","lastName","photoUrl","score","foreverRank","monthlyRank","AppService","get","Utils","time","Promise","res","setTimeout","isProductionMode","LocalTracker","console","log","MetrikaTracker","m","e","t","k","a","document","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","ym","clickmap","trackLinks","accurateTrackBounce","webvisor","warn","tracker","initialized","reachGoal","Question","questionWord","answerWords","list","correctAnswer","union","selectedAnswer","isCorrect","Boolean","expandableQuestion","dispatch","x","Game","questions","points","BattleService","post","question","patch","BackButton","platform","IOS","PanelHeader","panelHeaderProps","onBackButtonClick","text","showBackButton","vkPanelHeaderProps","left","onClick","undefined","Home","onStartBattle","user","before","description","size","onSelectAnswer","map","answer","isCorrectAnswer","isFailure","classes","clsx","correct","failure","stretched","className","battleActions","initialState","battle","activeQuestion","hasNextQuestion","battleReducer","state","action","type","payload","length","updatedQuestion","currentQuestions","questionIndex","findIndex","activeQuestionIndex","newQuestionIndex","Loader","delay","render","useState","pastDelay","setPastDelay","useEffect","timerId","clearTimeout","propTypes","PropTypes","number","func","Battle","onGoBack","onFinishGame","loading","setLoading","useReducer","startBattle","fetchedBattle","questionToSubmit","submitQuestion","questionWithAnswerData","waitForTimeout","Results","onRetry","correctAnswersNumber","filter","incorrectAnswersNumber","header","indicator","ScoreboardUser","ScoreboardItem","rank","after","SCOREBOARD_TYPES","ScoreboardHome","usersList","setUsersList","activeTab","setActiveTab","currentUserInScoreboard","setCurrentUserInScoreboard","users","currentScoreboardUser","find","fetchData","vertical","selected","style","paddingTop","index","App","setUser","popout","setPopout","activeStory","setActiveStory","activePanel","setActivePanel","setBattle","fetchUser","fetchUserData","fetchedUser","Sentry","dsn","beforeSend","event","hint","exception","errorMessage","originalException","message","actions","title","autoclose","onClose","init","localBattle","getBattle","updatedBattle","goToHomePanel","tabbar","ErrorBoundary","children","fallback","error","componentStack","resetError","bridge","subscribe","schemeAttribute","createAttribute","scheme","setNamedItem","renderReact","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.915f7c94.chunk.js","sourcesContent":["import { timeout } from 'promise-timeout'\nimport { toCamel, toSnake } from 'convert-keys'\nimport castArray from 'lodash.castarray'\nimport { ModelType } from './model-utils'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\ntype Data = Record<string, unknown>\n\nexport class ApiService {\n  static async post<T>(\n    url: string,\n    data: Data,\n    { sendToken = true, expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      data: ApiService.convertDataToBackendFormat(data),\n      sendToken,\n      method: 'POST',\n      expand,\n      Model,\n    })\n  }\n\n  static async patch<T>(\n    url: string,\n    data: Data,\n    { sendToken = true, expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      data: ApiService.convertDataToBackendFormat(data),\n      sendToken,\n      method: 'PATCH',\n      expand,\n      Model,\n    })\n  }\n\n  static async get<T>(\n    url: string,\n    { expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      sendToken: true,\n      method: 'GET',\n      expand,\n      Model,\n    })\n  }\n\n  static async send<T>(\n    url: string,\n    {\n      data,\n      sendToken,\n      method,\n      expand,\n      Model = null,\n    }: {\n      data?: Data\n      sendToken: boolean\n      method: string\n      expand?: string\n      Model?: ModelType<unknown>\n    }\n  ): Promise<T> {\n    const urlParams = new URLSearchParams()\n    if (expand) {\n      const expandString = castArray(expand).join(',')\n      urlParams.append('expand', expandString)\n    }\n    const options: RequestInit = {\n      headers: ApiService.createHeaders({ sendToken }),\n    }\n    if (method !== 'GET') {\n      options.mode = 'cors'\n      options.body = JSON.stringify(data)\n    }\n    options.method = method\n    const response = await timeout(\n      fetch(ApiService.createFullUrl(url, urlParams), options),\n      10000\n    )\n    return ApiService.processResponse<T>(response, Model)\n  }\n\n  static createHeaders({\n    sendToken,\n  }: { sendToken?: boolean } = {}): HeadersInit {\n    const headers: HeadersInit = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    }\n    if (sendToken) {\n      headers.Authorization = ApiService.getAuthorizationHeader()\n    }\n    return headers\n  }\n\n  static getAuthorizationHeader(): string {\n    const queryString = window.location.search.slice(1)\n    return `QueryString ${queryString}`\n  }\n\n  static createFullUrl(\n    relativeUrl: string,\n    queryParams: URLSearchParams\n  ): string {\n    const domain = ApiService.removeTrailingSlash(API_URL)\n    let url = `${domain}/${relativeUrl}`\n    if (queryParams && String(queryParams)) {\n      url += `?${String(queryParams)}`\n    }\n    return url\n  }\n\n  static async processResponse<T>(\n    response: Response,\n    Model: ModelType<unknown> = null\n  ): Promise<T> {\n    if (response.status >= 500 && response.status < 600) {\n      throw new Error('Внутренняя ошибка сервера')\n    }\n    let json: {\n      detail?: string\n    }\n    try {\n      json = await response.json()\n    } catch (e) {\n      throw new Error('Неверный ответ сервера')\n    }\n    if (!response.ok) {\n      if (json.detail) {\n        throw new Error(json.detail)\n      }\n      throw new Error('Неизвестная ошибка приложения')\n    }\n    return ApiService.convertDataToFrontendFormat<T>(json, Model)\n  }\n\n  static convertDataToBackendFormat(data: Data): Data {\n    return toSnake(data)\n  }\n\n  static convertDataToFrontendFormat<T>(data: Data, Model = null): T {\n    const camelCased: T = toCamel(data)\n    if (Model) {\n      return Model.fromObject(camelCased)\n    }\n    return camelCased\n  }\n\n  static removeTrailingSlash(url: string): string {\n    return url.endsWith('/') ? url.slice(0, -1) : url\n  }\n}\n","import fromJSON from 'tcomb/lib/fromJSON'\nimport { Struct, struct, StructProps } from 'tcomb'\n\nfunction getFromObject<T>(Model: ModelType<T>) {\n  return function fromObject(object: Record<string, unknown>) {\n    return fromJSON<T>(object, Model)\n  }\n}\n\nfunction set(key: string, value: unknown) {\n  return this.constructor.update(this, {\n    [key]: {\n      $set: value,\n    },\n  })\n}\n\nexport interface ModelType<T> extends Struct<T> {\n  fromObject(object: Record<string, unknown>): T\n}\n\nexport interface ModelInstance {\n  set(key: string, value: unknown): this\n}\n\nexport function createModel<T>(\n  attributes: StructProps,\n  name: string,\n  defaultProps = {}\n): ModelType<T> {\n  // @ts-ignore\n  const Model: ModelType<T> = struct(attributes, {\n    strict: true,\n    name,\n    defaultProps,\n  })\n\n  Model.fromObject = getFromObject<T>(Model)\n  Model.prototype.set = set\n\n  return Model\n}\n\nexport function extendModel<T>(\n  baseClass: ModelType<Record<string, unknown>>,\n  props: StructProps,\n  name: string\n): ModelType<T> {\n  // @ts-ignore\n  const Model: ModelType<T> = baseClass.extend(props, name)\n\n  Model.fromObject = getFromObject<T>(Model)\n  Model.prototype.set = set\n\n  return Model\n}\n","import tcomb, { irreducible, refinement } from 'tcomb'\n\nexport const Null = irreducible('Null', (value) => value === null)\n\nexport const PositiveNumber = refinement(\n  tcomb.Number,\n  (n) => n >= 0,\n  'PositiveNumber'\n)\n\nexport const ID = refinement(tcomb.Number, (n) => n >= 1, 'ID')\n","import { createModel, ModelInstance } from './model-utils'\nimport tcomb from 'tcomb'\nimport { ID, PositiveNumber } from './tcomb-types'\n\nconst attributes = {\n  id: ID,\n  vkId: ID,\n  firstName: tcomb.String,\n  lastName: tcomb.String,\n  photoUrl: tcomb.String,\n  score: PositiveNumber,\n  foreverRank: PositiveNumber,\n  monthlyRank: PositiveNumber,\n}\n\nexport interface UserInstance extends ModelInstance {\n  id: number\n  vkId: number\n  firstName: string\n  lastName: string\n  photoUrl: string\n  score: number\n  foreverRank: number\n  monthlyRank: number\n}\n\nexport class User extends createModel<UserInstance>(attributes, 'User') {}\n","import { ApiService } from '../core/ApiService'\nimport { User, UserInstance } from '../core/user-model'\n\nexport class AppService {\n  static async fetchUserData(): Promise<UserInstance> {\n    return ApiService.get<UserInstance>('user', { Model: User })\n  }\n}\n","export class Utils {\n  static isProductionMode = process.env.NODE_ENV === 'production'\n\n  static async waitForTimeout(time: number): Promise<void> {\n    await new Promise((res) => setTimeout(res, time))\n  }\n}\n","/* eslint-disable class-methods-use-this, no-console */\n// eslint-disable-next-line max-classes-per-file\nimport { Utils } from '../Utils'\n\ninterface TrackerInterface {\n  init: () => void\n  reachGoal: (name: string) => Promise<void>\n}\n\nclass LocalTracker implements TrackerInterface {\n  init() {\n    console.log('Init tracker')\n  }\n\n  async reachGoal(name) {\n    console.log(`Reach goal ${name}`)\n  }\n}\n\nclass MetrikaTracker implements TrackerInterface {\n  init(): void {\n    /* eslint-disable */\n    ;(function(m, e, t, r, i, k, a) {\n      m[i] =\n        m[i] ||\n        function() {\n          ;(m[i].a = m[i].a || []).push(arguments)\n        }\n      // @ts-ignore\n      m[i].l = 1 * new Date()\n      ;(k = e.createElement(t)),\n        (a = e.getElementsByTagName(t)[0]),\n        (k.async = 1),\n        (k.src = r),\n        a.parentNode.insertBefore(k, a)\n    })(window, document, 'script', 'https://mc.yandex.ru/metrika/tag.js', 'ym')\n\n    try {\n      // @ts-ignore\n      ym(70656700, 'init', {\n        clickmap: true,\n        trackLinks: true,\n        accurateTrackBounce: true,\n        webvisor: true,\n      })\n    } catch (e) {\n      console.log('Seems like Yandex metrika is blocked')\n      console.warn(e)\n    }\n    /* eslint-enable */\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  reachGoal(name: string): Promise<void> {\n    return new Promise((res) => {\n      try {\n        // @ts-ignore\n        window.ym(70656700, 'reachGoal', name, () => res())\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('Seems like Yandex metrika is blocked')\n        // eslint-disable-next-line no-console\n        console.warn(e)\n      }\n    })\n  }\n}\n\nconst TrackerClass = Utils.isProductionMode ? MetrikaTracker : LocalTracker\n\nconst tracker = new TrackerClass()\nlet initialized = false\n\nexport function initTracker(): void {\n  if (!initialized) {\n    tracker.init()\n    initialized = true\n  }\n}\n\nexport function reachGoal(name: string): void {\n  if (!initialized) throw new Error('Tracker was not initialized')\n  tracker.reachGoal(name)\n}\n","import { createModel, ModelInstance } from '../core/model-utils'\nimport tcomb from 'tcomb'\nimport { ID, Null } from '../core/tcomb-types'\n\nconst attributes = {\n  id: ID,\n  questionWord: tcomb.String,\n  answerWords: tcomb.list(tcomb.String),\n  correctAnswer: tcomb.union([Null, tcomb.String]),\n  selectedAnswer: tcomb.union([Null, tcomb.String]),\n  isCorrect: tcomb.Boolean,\n}\n\nexport interface QuestionInstance extends ModelInstance {\n  id: number\n  questionWord: string\n  answerWords: string[]\n  correctAnswer: null | string\n  selectedAnswer: null | string\n  isCorrect: boolean\n}\n\nexport class Question extends createModel<QuestionInstance>(\n  attributes,\n  'Question'\n) {}\n","import { createModel, ModelInstance } from '../core/model-utils'\nimport tcomb from 'tcomb'\nimport { Question, QuestionInstance } from './question-model'\nimport { ID } from '../core/tcomb-types'\n\nconst expandableQuestion = tcomb.union([Question, tcomb.Number])\nexpandableQuestion.dispatch = (x) => {\n  if (typeof x === 'number') return tcomb.Number\n  return Question\n}\n\nconst attributes = {\n  id: ID,\n  questions: tcomb.list(expandableQuestion),\n  points: tcomb.Number,\n}\n\nexport interface GameInstance extends ModelInstance {\n  id: number\n  questions: QuestionInstance[]\n  points: number\n}\n\nexport class Game extends createModel<GameInstance>(attributes, 'Game') {}\n","import { ApiService } from '../../core/ApiService'\nimport { Game, GameInstance } from '../../models/game-model'\nimport { Question, QuestionInstance } from '../../models/question-model'\n\nexport class BattleService {\n  static async startBattle(): Promise<GameInstance> {\n    return ApiService.post('game', {}, { expand: 'questions', Model: Game })\n  }\n\n  static async submitQuestion(\n    question: QuestionInstance\n  ): Promise<QuestionInstance> {\n    return ApiService.patch(\n      `question/${question.id}`,\n      {\n        selectedAnswer: question.selectedAnswer,\n      },\n      { Model: Question }\n    )\n  }\n\n  static async getBattle(id: number): Promise<GameInstance> {\n    return ApiService.get(`game/${id}`, { expand: 'questions', Model: Game })\n  }\n}\n","import React from 'react'\nimport { IOS, platform } from '@vkontakte/vkui/'\nimport Icon24Back from '@vkontakte/icons/dist/24/back'\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back'\n\nfunction BackButton(): JSX.Element {\n  const osName = platform()\n  if (osName === IOS) return <Icon28ChevronBack />\n  return <Icon24Back />\n}\n\nexport default BackButton\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport {\n  PanelHeaderButton,\n  PanelHeader as VKPanelHeader,\n} from '@vkontakte/vkui'\nimport BackButton from './BackButton'\n\nexport default function PanelHeader({\n  panelHeaderProps,\n  onBackButtonClick,\n  text,\n  showBackButton,\n}: InferProps<typeof PanelHeader.propTypes>): JSX.Element {\n  const vkPanelHeaderProps = { ...panelHeaderProps }\n  if (showBackButton)\n    vkPanelHeaderProps.left = (\n      <PanelHeaderButton onClick={onBackButtonClick}>\n        <BackButton />\n      </PanelHeaderButton>\n    )\n  else vkPanelHeaderProps.left = undefined\n  return <VKPanelHeader {...vkPanelHeaderProps}>{text}</VKPanelHeader>\n}\n\nPanelHeader.propTypes = {\n  onBackButtonClick: PropTypes.func,\n  text: PropTypes.string.isRequired,\n  panelHeaderProps: PropTypes.shape({\n    left: PropTypes.node,\n  }),\n  showBackButton: PropTypes.bool,\n}\n\nPanelHeader.defaultProps = {\n  panelHeaderProps: {},\n  showBackButton: true,\n  onBackButtonClick: () => {},\n}\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport Group from '@vkontakte/vkui/dist/components/Group/Group'\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell'\nimport Div from '@vkontakte/vkui/dist/components/Div/Div'\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar'\nimport PanelHeader from '../helpers/PanelHeader'\n\nconst Home = ({\n  onStartBattle,\n  user,\n}: InferProps<typeof Home.propTypes>): JSX.Element => (\n  <>\n    <PanelHeader text=\"English Clash\" showBackButton={false} />\n    {user && (\n      <Group>\n        <Cell\n          before={user.photoUrl ? <Avatar src={user.photoUrl} /> : null}\n          description={`Количество очков - ${user.score}, место в рейтинге: ${user.foreverRank}`}\n        >\n          {`${user.firstName} ${user.lastName}`}\n        </Cell>\n      </Group>\n    )}\n\n    <Group>\n      <Div>\n        <Button size=\"xl\" onClick={onStartBattle}>\n          Начать!\n        </Button>\n      </Div>\n    </Group>\n  </>\n)\n\nHome.propTypes = {\n  onStartBattle: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    photoUrl: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    foreverRank: PropTypes.number.isRequired,\n    monthlyRank: PropTypes.number.isRequired,\n  }),\n}\n\nHome.defaultProps = {\n  user: null,\n}\n\nexport default Home\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport Div from '@vkontakte/vkui/dist/components/Div/Div'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport './Question.css'\nimport clsx from 'clsx'\n\nfunction Question({\n  questionWord,\n  answerWords,\n  selectedAnswer,\n  isCorrect,\n  correctAnswer,\n  onSelectAnswer,\n}: InferProps<typeof Question.propTypes>): JSX.Element {\n  return (\n    <Div>\n      <p>Слово на английском: {questionWord}</p>\n      <p> Выбери его перевод на русский:</p>\n      {answerWords.map((answer) => {\n        const isCorrectAnswer = answer === correctAnswer\n        const isFailure = !isCorrect && answer === selectedAnswer\n        const classes = clsx('answer-button', {\n          correct: isCorrectAnswer,\n          failure: isFailure,\n        })\n        return (\n          <Button\n            key={answer}\n            size=\"xl\"\n            mode=\"primary\"\n            stretched\n            className={classes}\n            onClick={() => !selectedAnswer && onSelectAnswer(answer)}\n          >\n            {answer}\n          </Button>\n        )\n      })}\n    </Div>\n  )\n}\n\nQuestion.propTypes = {\n  questionWord: PropTypes.string.isRequired,\n  answerWords: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selectedAnswer: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  correctAnswer: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  isCorrect: PropTypes.bool,\n  onSelectAnswer: PropTypes.func.isRequired,\n}\n\nQuestion.defaultProps = {\n  correctAnswer: null,\n  selectedAnswer: null,\n  isCorrect: false,\n}\n\nexport default Question\n","import { GameInstance } from '../../models/game-model'\nimport { QuestionInstance } from '../../models/question-model'\n\nexport const battleActions = {\n  setBattle: 'setBattle',\n  updateQuestion: 'updateQuestion',\n  goToNextQuestion: 'goToNextQuestion',\n}\n\nexport const initialState = {\n  battle: null,\n  activeQuestion: null,\n  hasNextQuestion: false,\n}\n\nexport function battleReducer(\n  state = initialState,\n  action: {\n    type: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    payload?: any\n  }\n): {\n  battle: null | GameInstance\n  activeQuestion: null | QuestionInstance\n  hasNextQuestion: boolean\n} {\n  switch (action.type) {\n    case battleActions.setBattle: {\n      const battle = action.payload\n      const { questions } = battle\n      return {\n        ...state,\n        battle,\n        activeQuestion: questions[0],\n        hasNextQuestion: questions.length > 1,\n      }\n    }\n    case battleActions.updateQuestion: {\n      const updatedQuestion = action.payload\n      const currentQuestions = state.battle.questions\n      const questionIndex = currentQuestions.findIndex(\n        ({ id }) => id === updatedQuestion.id\n      )\n      const questions = [\n        ...currentQuestions.slice(0, questionIndex),\n        updatedQuestion,\n        ...currentQuestions.slice(questionIndex + 1),\n      ]\n      return {\n        ...state,\n        battle: {\n          ...state.battle,\n          questions,\n        },\n        activeQuestion: updatedQuestion,\n      }\n    }\n    case battleActions.goToNextQuestion: {\n      const currentQuestions = state.battle.questions\n      const activeQuestionIndex = currentQuestions.findIndex(\n        ({ id }) => id === state.activeQuestion.id\n      )\n      if (activeQuestionIndex === currentQuestions.length - 1) {\n        throw new Error('Вы уже на последнем вопросе')\n      }\n      const newQuestionIndex = activeQuestionIndex + 1\n      return {\n        ...state,\n        activeQuestion: currentQuestions[newQuestionIndex],\n        hasNextQuestion: newQuestionIndex < currentQuestions.length - 1,\n      }\n    }\n    default:\n      return state\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { PanelSpinner } from '@vkontakte/vkui'\n\nfunction Loader({\n  delay,\n  render,\n}: InferProps<typeof Loader.propTypes>): JSX.Element {\n  const [pastDelay, setPastDelay] = useState(false)\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      setPastDelay(true)\n    }, delay)\n    return () => {\n      clearTimeout(timerId)\n    }\n  }, [delay])\n\n  if (pastDelay) return render()\n  return null\n}\n\nLoader.propTypes = {\n  delay: PropTypes.number,\n  render: PropTypes.func,\n}\n\nLoader.defaultProps = {\n  delay: 200,\n  render: () => <PanelSpinner size=\"large\" />,\n}\n\nexport default Loader\n","import React, { useEffect, useReducer, useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport PanelHeader from '../helpers/PanelHeader'\nimport { BattleService } from './BattleService'\nimport Question from '../Question'\nimport { Utils } from '../../Utils'\nimport { battleActions, battleReducer, initialState } from './battle-reducer'\nimport Loader from '../helpers/Loader'\n\nconst WAIT_TIME_TO_SHOW_CORRECT_ANSWER = 1000\n\nconst Battle = ({\n  onGoBack,\n  onFinishGame,\n}: InferProps<typeof Battle.propTypes>): JSX.Element => {\n  const [loading, setLoading] = useState(false)\n  const [state, dispatch] = useReducer(battleReducer, initialState)\n  const { battle, activeQuestion, hasNextQuestion } = state\n\n  useEffect(() => {\n    const startBattle = async () => {\n      setLoading(true)\n      try {\n        const fetchedBattle = await BattleService.startBattle()\n        dispatch({\n          type: battleActions.setBattle,\n          payload: fetchedBattle,\n        })\n      } finally {\n        setLoading(false)\n      }\n    }\n    startBattle()\n  }, [])\n\n  const onSelectAnswer = async (answer) => {\n    const questionToSubmit = activeQuestion.set('selectedAnswer', answer)\n    setLoading(true)\n    try {\n      const questionWithAnswerData = await BattleService.submitQuestion(\n        questionToSubmit\n      )\n      dispatch({\n        type: battleActions.updateQuestion,\n        payload: questionWithAnswerData,\n      })\n    } finally {\n      setLoading(false)\n    }\n\n    await Utils.waitForTimeout(WAIT_TIME_TO_SHOW_CORRECT_ANSWER)\n\n    if (hasNextQuestion) dispatch({ type: battleActions.goToNextQuestion })\n    else onFinishGame(battle)\n  }\n\n  return (\n    <>\n      <PanelHeader onBackButtonClick={onGoBack} text=\"Игра\" />\n      {activeQuestion && (\n        <Question {...activeQuestion} onSelectAnswer={onSelectAnswer} />\n      )}\n      {loading && <Loader />}\n    </>\n  )\n}\n\nBattle.propTypes = {\n  onGoBack: PropTypes.func.isRequired,\n  onFinishGame: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    photoUrl: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    foreverRank: PropTypes.number.isRequired,\n    monthlyRank: PropTypes.number.isRequired,\n  }),\n}\n\nBattle.defaultProps = {\n  user: null,\n}\n\nexport default Battle\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport PanelHeader from '../helpers/PanelHeader'\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell'\nimport Counter from '@vkontakte/vkui/dist/components/Counter/Counter'\nimport Group from '@vkontakte/vkui/dist/components/Group/Group'\nimport Header from '@vkontakte/vkui/dist/components/Header/Header'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport './Results.css'\nimport Icon24Home from '@vkontakte/icons/dist/24/home'\nimport Icon24Replay from '@vkontakte/icons/dist/24/replay'\n\nfunction Results({\n  onGoBack,\n  battle,\n  onRetry,\n}: InferProps<typeof Results.propTypes>): JSX.Element {\n  const { questions, points } = battle\n  const correctAnswersNumber = questions.filter(({ isCorrect }) => isCorrect)\n    .length\n  const incorrectAnswersNumber = questions.length - correctAnswersNumber\n  return (\n    <>\n      <PanelHeader text=\"Результаты\" onBackButtonClick={onGoBack} />\n      <Group header={<Header mode=\"secondary\">Статистика</Header>}>\n        <Cell\n          indicator={<Counter mode=\"primary\">{correctAnswersNumber}</Counter>}\n        >\n          Верных ответов:\n        </Cell>\n        <Cell\n          indicator={<Counter mode=\"primary\">{incorrectAnswersNumber}</Counter>}\n        >\n          Неверных ответов:\n        </Cell>\n        <Cell indicator={<Counter mode=\"primary\">{points}</Counter>}>\n          Получено очков:\n        </Cell>\n      </Group>\n      <div className=\"home-button-wrapper\">\n        <Button onClick={onGoBack} size=\"l\" before={<Icon24Home />}>\n          Домой\n        </Button>\n        <Button onClick={onRetry} size=\"l\" before={<Icon24Replay />}>\n          Еще раз\n        </Button>\n      </div>\n    </>\n  )\n}\n\nResults.propTypes = {\n  onGoBack: PropTypes.func.isRequired,\n  onRetry: PropTypes.func.isRequired,\n  battle: PropTypes.shape({\n    points: PropTypes.number.isRequired,\n    questions: PropTypes.arrayOf(\n      PropTypes.shape({\n        isCorrect: PropTypes.bool.isRequired,\n      })\n    ).isRequired,\n  }),\n}\n\nResults.defaultProps = {\n  battle: null,\n}\n\nexport default Results\n","import tcomb from 'tcomb'\nimport { ID, PositiveNumber } from '../core/tcomb-types'\nimport { createModel, ModelInstance } from '../core/model-utils'\n\nconst attributes = {\n  id: ID,\n  firstName: tcomb.String,\n  lastName: tcomb.String,\n  photoUrl: tcomb.String,\n  score: PositiveNumber,\n}\n\nexport interface ScoreboardUserInstance extends ModelInstance {\n  id: number\n  firstName: string\n  lastName: string\n  photoUrl: string\n  score: number\n}\n\nexport class ScoreboardUser extends createModel<ScoreboardUserInstance>(\n  attributes,\n  'ScoreboardUser'\n) {}\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { Avatar, Counter, SimpleCell } from '@vkontakte/vkui'\n\nfunction ScoreboardItem({\n  rank,\n  score,\n  photoUrl,\n  firstName,\n  lastName,\n}: InferProps<typeof ScoreboardItem.propTypes>): JSX.Element {\n  return (\n    <SimpleCell before={<Counter>{rank}</Counter>} after={score}>\n      <div className=\"scoreboard-item\">\n        <Avatar size={40} src={photoUrl} />\n        <div className=\"scoreboard-item-name\">\n          {firstName} {lastName}\n        </div>\n      </div>\n    </SimpleCell>\n  )\n}\n\nScoreboardItem.propTypes = {\n  rank: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  photoUrl: PropTypes.string.isRequired,\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n\nexport default ScoreboardItem\n","import React, { useEffect, useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport PanelHeader from '../helpers/PanelHeader'\nimport { ApiService } from '../../core/ApiService'\nimport { Div, FixedLayout, Group, List, Tabs, TabsItem } from '@vkontakte/vkui'\nimport { ScoreboardUser } from '../../models/scoreboard-user-model'\nimport './ScoreboardHome.css'\nimport ScoreboardItem from './ScoreboardItem'\nimport Loader from '../helpers/Loader'\n\nconst SCOREBOARD_TYPES = {\n  forever: 'forever',\n  monthly: 'monthly',\n}\n\nfunction ScoreboardHome({\n  user,\n}: InferProps<typeof ScoreboardHome.propTypes>): JSX.Element {\n  const [usersList, setUsersList] = useState<ScoreboardUser[]>([])\n  const [loading, setLoading] = useState(false)\n  const [activeTab, setActiveTab] = useState(SCOREBOARD_TYPES.forever)\n  const [currentUserInScoreboard, setCurrentUserInScoreboard] = useState(false)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setUsersList([])\n      setLoading(true)\n      const users = await ApiService.get<ScoreboardUser[]>(\n        `${activeTab}_scoreboard`\n      )\n      const currentScoreboardUser = ScoreboardUser.fromObject(user)\n      setCurrentUserInScoreboard(\n        Boolean(users.find(({ id }) => id === currentScoreboardUser.id))\n      )\n      setUsersList(users)\n      setLoading(false)\n    }\n\n    fetchData()\n  }, [activeTab, user])\n\n  return (\n    <>\n      <PanelHeader text=\"Рейтинг\" showBackButton={false} />\n      <FixedLayout vertical=\"top\">\n        <Tabs>\n          <TabsItem\n            selected={activeTab === SCOREBOARD_TYPES.forever}\n            onClick={() => setActiveTab(SCOREBOARD_TYPES.forever)}\n          >\n            За все время\n          </TabsItem>\n          <TabsItem\n            selected={activeTab === SCOREBOARD_TYPES.monthly}\n            onClick={() => setActiveTab(SCOREBOARD_TYPES.monthly)}\n          >\n            За месяц\n          </TabsItem>\n        </Tabs>\n      </FixedLayout>\n      <Div>\n        <Group style={{ paddingTop: '20px' }}>\n          {!loading && (\n            <List>\n              {usersList.map(\n                ({ id, firstName, lastName, photoUrl, score }, index) => (\n                  <ScoreboardItem\n                    rank={index + 1}\n                    score={score}\n                    photoUrl={photoUrl}\n                    firstName={firstName}\n                    lastName={lastName}\n                    key={id}\n                  />\n                )\n              )}\n              {!currentUserInScoreboard && (\n                <ScoreboardItem\n                  rank={\n                    activeTab === SCOREBOARD_TYPES.forever\n                      ? user.foreverRank\n                      : user.monthlyRank\n                  }\n                  score={user.score}\n                  photoUrl={user.photoUrl}\n                  firstName={user.firstName}\n                  lastName={user.lastName}\n                />\n              )}\n            </List>\n          )}\n          {loading && <Loader />}\n        </Group>\n      </Div>\n    </>\n  )\n}\n\nScoreboardHome.propTypes = {\n  user: PropTypes.shape({\n    photoUrl: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    foreverRank: PropTypes.number.isRequired,\n    monthlyRank: PropTypes.number.isRequired,\n  }),\n}\n\nScoreboardHome.defaultProps = {\n  user: null,\n}\n\nexport default ScoreboardHome\n","import React, { useEffect, useState } from 'react'\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner'\nimport Alert from '@vkontakte/vkui/dist/components/Alert/Alert'\nimport '@vkontakte/vkui/dist/vkui.css'\nimport { AppService } from './AppService'\nimport './constant-styles.css'\nimport { Utils } from '../Utils'\nimport * as Sentry from '@sentry/react'\nimport './App.css'\nimport { initTracker, reachGoal } from '../core/tracker'\nimport { Epic, Panel, Tabbar, TabbarItem, View } from '@vkontakte/vkui'\nimport { GameInstance } from '../models/game-model'\nimport { BattleService } from './panels/BattleService'\nimport Home from './panels/Home'\nimport Battle from './panels/Battle'\nimport Results from './panels/Results'\nimport { Icon28Game, Icon28UsersOutline } from '@vkontakte/icons'\nimport ScoreboardHome from './panels/ScoreboardHome'\n\nconst App = (): JSX.Element => {\n  const [user, setUser] = useState(null)\n  const [popout, setPopout] = useState(<ScreenSpinner />)\n  const [activeStory, setActiveStory] = useState('game')\n  const [activePanel, setActivePanel] = useState('home')\n  const [battle, setBattle] = useState(null)\n\n  useEffect(() => {\n    if (Utils.isProductionMode) {\n      Sentry.init({\n        dsn: process.env.REACT_APP_SENTRY_DSN,\n        beforeSend(event, hint) {\n          if (event.exception) {\n            const errorMessage =\n              hint &&\n              hint.originalException &&\n              hint.originalException instanceof Error &&\n              hint.originalException.message\n                ? hint.originalException.message\n                : ''\n            setPopout(\n              <Alert\n                actions={[\n                  {\n                    mode: 'default',\n                    title: 'ОК',\n                    autoclose: true,\n                  },\n                ]}\n                onClose={() => setPopout(null)}\n              >\n                <h2>Возникла ошибка =(</h2>\n                {errorMessage && (\n                  <p className=\"error-message\">{errorMessage}</p>\n                )}\n                <p>Попробуй еще раз</p>\n              </Alert>\n            )\n          }\n          return event\n        },\n      })\n    }\n    initTracker()\n  }, [])\n\n  async function fetchUser() {\n    try {\n      const fetchedUser = await AppService.fetchUserData()\n      setUser(fetchedUser)\n    } finally {\n      setPopout(null)\n    }\n  }\n\n  useEffect(() => {\n    fetchUser()\n  }, [])\n\n  const onFinishGame = async (localBattle: GameInstance) => {\n    const updatedBattle = await BattleService.getBattle(localBattle.id)\n    setBattle(updatedBattle)\n    setActivePanel('results')\n    reachGoal('finish-game')\n    fetchUser()\n  }\n\n  const goToHomePanel = () => setActivePanel('home')\n\n  const onStartBattle = () => {\n    setActivePanel('battle')\n    reachGoal('start-game')\n  }\n\n  const onOpenScoreboard = () => {\n    setActiveStory('scoreboard')\n    setActivePanel('scoreboard-home')\n  }\n\n  return (\n    <Epic\n      activeStory={activeStory}\n      tabbar={\n        <Tabbar>\n          <TabbarItem\n            text=\"Игра\"\n            selected={activeStory === 'game'}\n            onClick={() => {\n              setActiveStory('game')\n              setActivePanel('home')\n            }}\n          >\n            <Icon28Game />\n          </TabbarItem>\n          <TabbarItem\n            text=\"Рейтинг\"\n            selected={activeStory === 'scoreboard'}\n            onClick={onOpenScoreboard}\n          >\n            <Icon28UsersOutline />\n          </TabbarItem>\n        </Tabbar>\n      }\n    >\n      <View id=\"game\" activePanel={activePanel} popout={popout}>\n        <Panel id=\"home\">\n          <Home user={user} onStartBattle={onStartBattle} />\n        </Panel>\n        <Panel id=\"battle\">\n          <Battle\n            onGoBack={goToHomePanel}\n            user={user}\n            onFinishGame={onFinishGame}\n          />\n        </Panel>\n        <Panel id=\"results\">\n          <Results\n            onRetry={onStartBattle}\n            onGoBack={goToHomePanel}\n            battle={battle}\n          />\n        </Panel>\n      </View>\n      <View id=\"scoreboard\" activePanel={activePanel} popout={popout}>\n        <Panel id=\"scoreboard-home\">\n          <ScoreboardHome user={user} />\n        </Panel>\n      </View>\n    </Epic>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Sentry from '@sentry/react'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport { Utils } from '../Utils'\n\n/**\n * Component catches only errors in rendering phase and lifecycle\n * Error in click and async handlers need to be caught and rendered separately\n */\nexport function ErrorBoundary({\n  children,\n}: InferProps<typeof ErrorBoundary.propTypes>): JSX.Element {\n  if (!Utils.isProductionMode) return children\n\n  return (\n    <Sentry.ErrorBoundary\n      fallback={({ error, componentStack, resetError }) => (\n        <>\n          <div>Ошибка отрисовки:</div>\n          <p>{error.message}</p>\n          <p>{componentStack}</p>\n          <Button onClick={resetError}>Попробовать еще раз</Button>\n        </>\n      )}\n    >\n      {children}\n    </Sentry.ErrorBoundary>\n  )\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.element.isRequired,\n}\n","import 'core-js/features/map'\nimport 'core-js/features/set'\nimport React from 'react'\nimport { render as renderReact } from 'react-dom'\nimport bridge from '@vkontakte/vk-bridge'\nimport App from './components/App'\nimport { Utils } from './Utils'\nimport { ErrorBoundary } from './components/ErrorBoundary'\n\n// Init VK  Mini App\nbridge.send('VKWebAppInit')\n\nbridge.subscribe(({ detail: { type, data } }) => {\n  if (type === 'VKWebAppUpdateConfig') {\n    const schemeAttribute = document.createAttribute('scheme')\n    // @ts-ignore\n    schemeAttribute.value = data.scheme || 'client_light'\n    document.body.attributes.setNamedItem(schemeAttribute)\n  }\n})\n\nfunction render() {\n  renderReact(\n    <React.StrictMode>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\nrender()\n\nif (!Utils.isProductionMode) {\n  if (module.hot) {\n    module.hot.accept('./components/App', render)\n  }\n\n  import('./eruda')\n}\n"],"sourceRoot":""}