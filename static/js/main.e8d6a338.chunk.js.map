{"version":3,"sources":["core/ApiService.ts","core/model-utils.ts","core/tcomb-types.ts","constants.ts","core/user-model.ts","Utils.ts","core/tracker.ts","components/AppService.ts","models/question-model.ts","models/game-model.ts","components/panels/BattleService.ts","components/helpers/BackButton.tsx","components/helpers/PanelHeader.tsx","components/helpers/Loader.tsx","components/panels/Home.tsx","components/QuestionService.ts","components/Question.tsx","components/panels/battle-reducer.ts","components/panels/Battle.tsx","components/panels/Results.tsx","models/scoreboard-user-model.ts","components/panels/ScoreboardItem.tsx","components/panels/ScoreboardHome.tsx","components/panels/ChooseGameType.tsx","components/App.tsx","components/ErrorBoundary.tsx","index.tsx"],"names":["ApiService","url","data","sendToken","expand","Model","send","convertDataToBackendFormat","method","urlParams","URLSearchParams","expandString","castArray","join","append","options","headers","createHeaders","mode","body","JSON","stringify","timeout","fetch","createFullApiURL","response","processResponse","Accept","Authorization","getAuthorizationHeader","queryString","window","location","search","slice","relativeUrl","queryParams","createFullUrl","domain","removeTrailingSlash","process","String","status","Error","json","ok","detail","convertDataToFrontendFormat","toSnake","camelCased","toCamel","fromObject","endsWith","getFromObject","object","fromJSON","set","key","value","this","constructor","update","$set","createModel","attributes","name","defaultProps","struct","prototype","Null","irreducible","PositiveNumber","refinement","tcomb","Number","n","ID","NOTIFICATIONS_STATUSES","ALLOW","BLOCK","TO_BE_REQUESTED","GAME_TYPES","User","id","vkId","firstName","lastName","photoUrl","score","foreverRank","monthlyRank","notificationsStatus","enums","of","Object","values","Utils","time","Promise","res","setTimeout","get","isProductionMode","LocalTracker","console","log","MetrikaTracker","m","e","t","k","a","document","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","ym","clickmap","trackLinks","accurateTrackBounce","webvisor","warn","tracker","initialized","reachGoal","AppService","patch","areNotificationsEnabledOnVkSide","allowNotifications","bridge","result","error_type","error_data","error_code","error_reason","blockNotifications","Boolean","parseInt","getSearchParam","Question","question","answerWords","list","correctAnswer","union","selectedAnswer","isCorrect","expandableQuestion","dispatch","x","Game","questions","points","BattleService","gameType","post","type","BackButton","platform","IOS","PanelHeader","panelHeaderProps","onBackButtonClick","text","showBackButton","vkPanelHeaderProps","left","onClick","undefined","Loader","delay","render","useState","pastDelay","setPastDelay","useEffect","timerId","clearTimeout","propTypes","PropTypes","number","func","size","Home","onStartBattle","user","onUpdateUser","loading","setLoading","onSwitchNotifications","event","newChecked","target","checked","requestNotifications","updatedUser","before","description","style","display","flexDirection","multiline","disabled","indicator","onChange","QuestionService","relativeUrlWithoutSlash","removePrecedingSlash","startsWith","renderQuestionMap","questionWord","imagePath","className","createFullPictureUrl","alt","onSelectAnswer","questionString","renderQuestion","map","answer","isCorrectAnswer","isFailure","classes","clsx","correct","failure","stretched","battleActions","initialState","battle","activeQuestion","hasNextQuestion","battleReducer","state","action","payload","length","updatedQuestion","currentQuestions","questionIndex","findIndex","activeQuestionIndex","newQuestionIndex","Battle","onGoBack","onFinishGame","useReducer","startBattle","fetchedBattle","questionToSubmit","submitQuestion","questionWithAnswerData","waitForTimeout","Results","onRetry","correctAnswersNumber","filter","incorrectAnswersNumber","rejectedNotifications","setRejectedNotifications","showNotificationsRequest","navigationButtons","notificationRequest","marginTop","padding","header","ScoreboardUser","ScoreboardItem","rank","after","SCOREBOARD_TYPES","ScoreboardHome","usersList","setUsersList","activeTab","setActiveTab","currentUserInScoreboard","setCurrentUserInScoreboard","users","currentScoreboardUser","find","fetchData","vertical","selected","paddingTop","index","ChooseGameType","onChoose","App","setUser","popout","setPopout","activeStory","setActiveStory","activePanel","setActivePanel","setBattle","setGameType","fetchUser","isInitialRequest","fetchUserData","fetchedUser","Sentry","dsn","beforeSend","hint","exception","errorMessage","originalException","message","actions","title","autoclose","onClose","init","localBattle","getBattle","updatedBattle","goToHomePanel","goToChooseGameTypePanel","chosenGameType","tabbar","ErrorBoundary","children","fallback","error","componentStack","resetError","subscribe","schemeAttribute","createAttribute","scheme","setNamedItem","renderReact","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8d6a338.chunk.js","sourcesContent":["import { timeout } from 'promise-timeout'\nimport { toCamel, toSnake } from 'convert-keys'\nimport castArray from 'lodash.castarray'\nimport { ModelType } from './model-utils'\n\nconst API_HOST = process.env.REACT_APP_API_HOST\n\ntype Data = Record<string, unknown>\n\nexport class ApiService {\n  static async post<T>(\n    url: string,\n    data: Data,\n    { sendToken = true, expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      data: ApiService.convertDataToBackendFormat(data),\n      sendToken,\n      method: 'POST',\n      expand,\n      Model,\n    })\n  }\n\n  static async patch<T>(\n    url: string,\n    data: Data,\n    { sendToken = true, expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      data: ApiService.convertDataToBackendFormat(data),\n      sendToken,\n      method: 'PATCH',\n      expand,\n      Model,\n    })\n  }\n\n  static async get<T>(\n    url: string,\n    { expand = '', Model = null } = {}\n  ): Promise<T> {\n    return ApiService.send<T>(url, {\n      sendToken: true,\n      method: 'GET',\n      expand,\n      Model,\n    })\n  }\n\n  static async send<T>(\n    url: string,\n    {\n      data,\n      sendToken,\n      method,\n      expand,\n      Model = null,\n    }: {\n      data?: Data\n      sendToken: boolean\n      method: string\n      expand?: string\n      Model?: ModelType<unknown>\n    }\n  ): Promise<T> {\n    const urlParams = new URLSearchParams()\n    if (expand) {\n      const expandString = castArray(expand).join(',')\n      urlParams.append('expand', expandString)\n    }\n    const options: RequestInit = {\n      headers: ApiService.createHeaders({ sendToken }),\n    }\n    if (method !== 'GET') {\n      options.mode = 'cors'\n      options.body = JSON.stringify(data)\n    }\n    options.method = method\n    const response = await timeout(\n      fetch(ApiService.createFullApiURL(url, urlParams), options),\n      10000\n    )\n    return ApiService.processResponse<T>(response, Model)\n  }\n\n  static createHeaders({\n    sendToken,\n  }: { sendToken?: boolean } = {}): HeadersInit {\n    const headers: HeadersInit = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    }\n    if (sendToken) {\n      headers.Authorization = ApiService.getAuthorizationHeader()\n    }\n    return headers\n  }\n\n  static getAuthorizationHeader(): string {\n    const queryString = window.location.search.slice(1)\n    return `QueryString ${queryString}`\n  }\n\n  static createFullApiURL(\n    relativeUrl: string,\n    queryParams?: URLSearchParams\n  ): string {\n    return ApiService.createFullUrl(`api/${relativeUrl}`, queryParams)\n  }\n\n  static createFullUrl(\n    relativeUrl: string,\n    queryParams?: URLSearchParams\n  ): string {\n    const domain = ApiService.removeTrailingSlash(API_HOST)\n    let url = `${domain}/${relativeUrl}`\n    if (queryParams && String(queryParams)) {\n      url += `?${String(queryParams)}`\n    }\n    return url\n  }\n\n  static async processResponse<T>(\n    response: Response,\n    Model: ModelType<unknown> = null\n  ): Promise<T> {\n    if (response.status >= 500 && response.status < 600) {\n      throw new Error('Внутренняя ошибка сервера')\n    }\n    let json: {\n      detail?: string\n    }\n    try {\n      json = await response.json()\n    } catch (e) {\n      throw new Error('Неверный ответ сервера')\n    }\n    if (!response.ok) {\n      if (json.detail) {\n        throw new Error(json.detail)\n      }\n      throw new Error('Неизвестная ошибка приложения')\n    }\n    return ApiService.convertDataToFrontendFormat<T>(json, Model)\n  }\n\n  static convertDataToBackendFormat(data: Data): Data {\n    return toSnake(data)\n  }\n\n  static convertDataToFrontendFormat<T>(data: Data, Model = null): T {\n    const camelCased: T = toCamel(data)\n    if (Model) {\n      return Model.fromObject(camelCased)\n    }\n    return camelCased\n  }\n\n  static removeTrailingSlash(url: string): string {\n    return url.endsWith('/') ? url.slice(0, -1) : url\n  }\n}\n","import fromJSON from 'tcomb/lib/fromJSON'\nimport { Struct, struct, StructProps } from 'tcomb'\n\nfunction getFromObject<T>(Model: ModelType<T>) {\n  return function fromObject(object: Record<string, unknown>) {\n    return fromJSON<T>(object, Model)\n  }\n}\n\nfunction set(key: string, value: unknown) {\n  return this.constructor.update(this, {\n    [key]: {\n      $set: value,\n    },\n  })\n}\n\nexport interface ModelType<T> extends Struct<T> {\n  fromObject(object: Record<string, unknown>): T\n}\n\nexport interface ModelInstance {\n  set(key: string, value: unknown): this\n}\n\nexport function createModel<T>(\n  attributes: StructProps,\n  name: string,\n  defaultProps = {}\n): ModelType<T> {\n  // @ts-ignore\n  const Model: ModelType<T> = struct(attributes, {\n    name,\n    defaultProps,\n  })\n\n  Model.fromObject = getFromObject<T>(Model)\n  Model.prototype.set = set\n\n  return Model\n}\n\nexport function extendModel<T>(\n  baseClass: ModelType<Record<string, unknown>>,\n  props: StructProps,\n  name: string\n): ModelType<T> {\n  // @ts-ignore\n  const Model: ModelType<T> = baseClass.extend(props, name)\n\n  Model.fromObject = getFromObject<T>(Model)\n  Model.prototype.set = set\n\n  return Model\n}\n","import tcomb, { irreducible, refinement } from 'tcomb'\n\nexport const Null = irreducible('Null', (value) => value === null)\n\nexport const PositiveNumber = refinement(\n  tcomb.Number,\n  (n) => n >= 0,\n  'PositiveNumber'\n)\n\nexport const ID = refinement(tcomb.Number, (n) => n >= 1, 'ID')\n","export const NOTIFICATIONS_STATUSES = {\n  ALLOW: 'allow',\n  BLOCK: 'block',\n  TO_BE_REQUESTED: 'to be requested',\n}\n\nexport const GAME_TYPES = {\n  WORD: 'word',\n  PICTURE: 'picture',\n}\n","import { createModel, ModelInstance } from './model-utils'\nimport tcomb from 'tcomb'\nimport { ID, PositiveNumber } from './tcomb-types'\nimport { NOTIFICATIONS_STATUSES } from '../constants'\n\nconst attributes = {\n  id: ID,\n  vkId: ID,\n  firstName: tcomb.String,\n  lastName: tcomb.String,\n  photoUrl: tcomb.String,\n  score: PositiveNumber,\n  foreverRank: PositiveNumber,\n  monthlyRank: PositiveNumber,\n  notificationsStatus: tcomb.enums.of(\n    Object.values(NOTIFICATIONS_STATUSES),\n    'notificationsStatus'\n  ),\n}\n\nexport interface UserInstance extends ModelInstance {\n  id: number\n  vkId: number\n  firstName: string\n  lastName: string\n  photoUrl: string\n  score: number\n  foreverRank: number\n  monthlyRank: number\n  notificationsStatus: 'allow' | 'block' | 'to be requested'\n}\n\nexport class User extends createModel<UserInstance>(attributes, 'User') {}\n","export class Utils {\n  static isProductionMode = process.env.NODE_ENV === 'production'\n\n  static async waitForTimeout(time: number): Promise<void> {\n    await new Promise((res) => setTimeout(res, time))\n  }\n\n  static getSearchParam(name: string): string {\n    const urlParams = new URLSearchParams(window.location.search)\n    return urlParams.get(name)\n  }\n}\n","/* eslint-disable class-methods-use-this, no-console */\n// eslint-disable-next-line max-classes-per-file\nimport { Utils } from '../Utils'\n\ninterface TrackerInterface {\n  init: () => void\n  reachGoal: (name: string) => Promise<void>\n}\n\nclass LocalTracker implements TrackerInterface {\n  init() {\n    console.log('Init tracker')\n  }\n\n  async reachGoal(name) {\n    console.log(`Reach goal ${name}`)\n  }\n}\n\nclass MetrikaTracker implements TrackerInterface {\n  init(): void {\n    /* eslint-disable */\n    ;(function(m, e, t, r, i, k, a) {\n      m[i] =\n        m[i] ||\n        function() {\n          ;(m[i].a = m[i].a || []).push(arguments)\n        }\n      // @ts-ignore\n      m[i].l = 1 * new Date()\n      ;(k = e.createElement(t)),\n        (a = e.getElementsByTagName(t)[0]),\n        (k.async = 1),\n        (k.src = r),\n        a.parentNode.insertBefore(k, a)\n    })(window, document, 'script', 'https://mc.yandex.ru/metrika/tag.js', 'ym')\n\n    try {\n      // @ts-ignore\n      ym(70656700, 'init', {\n        clickmap: true,\n        trackLinks: true,\n        accurateTrackBounce: true,\n        webvisor: true,\n      })\n    } catch (e) {\n      console.log('Seems like Yandex metrika is blocked')\n      console.warn(e)\n    }\n    /* eslint-enable */\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  reachGoal(name: string): Promise<void> {\n    return new Promise((res) => {\n      try {\n        // @ts-ignore\n        window.ym(70656700, 'reachGoal', name, () => res())\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('Seems like Yandex metrika is blocked')\n        // eslint-disable-next-line no-console\n        console.warn(e)\n      }\n    })\n  }\n}\n\nconst TrackerClass = Utils.isProductionMode ? MetrikaTracker : LocalTracker\n\nconst tracker = new TrackerClass()\nlet initialized = false\n\nexport function initTracker(): void {\n  if (!initialized) {\n    tracker.init()\n    initialized = true\n  }\n}\n\nexport function reachGoal(name: string): void {\n  if (!initialized) throw new Error('Tracker was not initialized')\n  tracker.reachGoal(name)\n}\n","import { ApiService } from '../core/ApiService'\nimport { User, UserInstance } from '../core/user-model'\nimport { NOTIFICATIONS_STATUSES } from '../constants'\nimport bridge from '@vkontakte/vk-bridge'\nimport { Utils } from '../Utils'\nimport { reachGoal } from '../core/tracker'\n\nexport class AppService {\n  static areNotificationsEnabledOnVkSide = Boolean(\n    parseInt(Utils.getSearchParam('vk_are_notifications_enabled'), 10)\n  )\n\n  static async fetchUserData(): Promise<UserInstance> {\n    return ApiService.get<UserInstance>('user', { Model: User })\n  }\n\n  static async allowNotifications(): Promise<UserInstance> {\n    reachGoal('allow-notifications')\n    return ApiService.patch<UserInstance>(\n      'user',\n      { notificationsStatus: NOTIFICATIONS_STATUSES.ALLOW },\n      { Model: User }\n    )\n  }\n\n  static async blockNotifications(): Promise<UserInstance> {\n    reachGoal('block-notifications')\n    return ApiService.patch<UserInstance>(\n      'user',\n      { notificationsStatus: NOTIFICATIONS_STATUSES.BLOCK },\n      { Model: User }\n    )\n  }\n\n  static async requestNotifications(): Promise<UserInstance> {\n    if (AppService.areNotificationsEnabledOnVkSide) {\n      // already allowed in VK, need only to allow on our backend\n      return AppService.allowNotifications()\n    }\n    try {\n      const { result } = await bridge.send('VKWebAppAllowNotifications')\n      if (result) return AppService.allowNotifications()\n    } catch (e) {\n      // rejected\n      if (\n        e.error_type === 'client_error' &&\n        e.error_data &&\n        e.error_data.error_code === 4 &&\n        e.error_data.error_reason === 'User denied'\n      )\n        return AppService.blockNotifications()\n      throw e\n    }\n  }\n}\n","import { createModel, ModelInstance } from '../core/model-utils'\nimport tcomb from 'tcomb'\nimport { ID, Null } from '../core/tcomb-types'\n\nconst attributes = {\n  id: ID,\n  question: tcomb.String,\n  answerWords: tcomb.list(tcomb.String),\n  correctAnswer: tcomb.union([Null, tcomb.String]),\n  selectedAnswer: tcomb.union([Null, tcomb.String]),\n  isCorrect: tcomb.Boolean,\n}\n\nexport interface QuestionInstance extends ModelInstance {\n  id: number\n  question: string\n  answerWords: string[]\n  correctAnswer: null | string\n  selectedAnswer: null | string\n  isCorrect: boolean\n}\n\nexport class Question extends createModel<QuestionInstance>(\n  attributes,\n  'Question'\n) {}\n","import { createModel, ModelInstance } from '../core/model-utils'\nimport tcomb from 'tcomb'\nimport { Question, QuestionInstance } from './question-model'\nimport { ID } from '../core/tcomb-types'\n\nconst expandableQuestion = tcomb.union([Question, tcomb.Number])\nexpandableQuestion.dispatch = (x) => {\n  if (typeof x === 'number') return tcomb.Number\n  return Question\n}\n\nconst attributes = {\n  id: ID,\n  questions: tcomb.list(expandableQuestion),\n  points: tcomb.Number,\n}\n\nexport interface GameInstance extends ModelInstance {\n  id: number\n  questions: QuestionInstance[]\n  points: number\n}\n\nexport class Game extends createModel<GameInstance>(attributes, 'Game') {}\n","import { ApiService } from '../../core/ApiService'\nimport { Game, GameInstance } from '../../models/game-model'\nimport { Question, QuestionInstance } from '../../models/question-model'\n\nexport class BattleService {\n  static async startBattle(gameType: string): Promise<GameInstance> {\n    return ApiService.post(\n      'game',\n      { type: gameType },\n      { expand: 'questions', Model: Game }\n    )\n  }\n\n  static async submitQuestion(\n    question: QuestionInstance\n  ): Promise<QuestionInstance> {\n    return ApiService.patch(\n      `question/${question.id}`,\n      {\n        selectedAnswer: question.selectedAnswer,\n      },\n      { Model: Question }\n    )\n  }\n\n  static async getBattle(id: number): Promise<GameInstance> {\n    return ApiService.get(`game/${id}`, { expand: 'questions', Model: Game })\n  }\n}\n","import React from 'react'\nimport { IOS, platform } from '@vkontakte/vkui/'\nimport Icon24Back from '@vkontakte/icons/dist/24/back'\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back'\n\nfunction BackButton(): JSX.Element {\n  const osName = platform()\n  if (osName === IOS) return <Icon28ChevronBack />\n  return <Icon24Back />\n}\n\nexport default BackButton\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport {\n  PanelHeaderButton,\n  PanelHeader as VKPanelHeader,\n} from '@vkontakte/vkui'\nimport BackButton from './BackButton'\n\nexport default function PanelHeader({\n  panelHeaderProps,\n  onBackButtonClick,\n  text,\n  showBackButton,\n}: InferProps<typeof PanelHeader.propTypes>): JSX.Element {\n  const vkPanelHeaderProps = { ...panelHeaderProps }\n  if (showBackButton)\n    vkPanelHeaderProps.left = (\n      <PanelHeaderButton onClick={onBackButtonClick}>\n        <BackButton />\n      </PanelHeaderButton>\n    )\n  else vkPanelHeaderProps.left = undefined\n  return <VKPanelHeader {...vkPanelHeaderProps}>{text}</VKPanelHeader>\n}\n\nPanelHeader.propTypes = {\n  onBackButtonClick: PropTypes.func,\n  text: PropTypes.string.isRequired,\n  panelHeaderProps: PropTypes.shape({\n    left: PropTypes.node,\n  }),\n  showBackButton: PropTypes.bool,\n}\n\nPanelHeader.defaultProps = {\n  panelHeaderProps: {},\n  showBackButton: true,\n  onBackButtonClick: () => {},\n}\n","import React, { useEffect, useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { PanelSpinner } from '@vkontakte/vkui'\n\nfunction Loader({\n  delay,\n  render,\n}: InferProps<typeof Loader.propTypes>): JSX.Element {\n  const [pastDelay, setPastDelay] = useState(false)\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      setPastDelay(true)\n    }, delay)\n    return () => {\n      clearTimeout(timerId)\n    }\n  }, [delay])\n\n  if (pastDelay) return render()\n  return null\n}\n\nLoader.propTypes = {\n  delay: PropTypes.number,\n  render: PropTypes.func,\n}\n\nLoader.defaultProps = {\n  delay: 200,\n  render: () => <PanelSpinner size=\"large\" />,\n}\n\nexport default Loader\n","import React, { useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport Group from '@vkontakte/vkui/dist/components/Group/Group'\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell'\nimport Div from '@vkontakte/vkui/dist/components/Div/Div'\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar'\nimport PanelHeader from '../helpers/PanelHeader'\nimport { Switch } from '@vkontakte/vkui'\nimport { AppService } from '../AppService'\nimport { UserInstance } from '../../core/user-model'\nimport Loader from '../helpers/Loader'\nimport { NOTIFICATIONS_STATUSES } from '../../constants'\n\nconst Home = ({\n  onStartBattle,\n  user,\n  onUpdateUser,\n}: InferProps<typeof Home.propTypes>): JSX.Element => {\n  const [loading, setLoading] = useState(false)\n\n  const onSwitchNotifications = async (event) => {\n    const { checked: newChecked } = event.target\n    setLoading(true)\n    try {\n      let updatedUser: UserInstance\n      if (newChecked) {\n        // need to enable\n        updatedUser = await AppService.requestNotifications()\n      } else {\n        // need to disable\n        updatedUser = await AppService.blockNotifications()\n      }\n      onUpdateUser(updatedUser)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <>\n      <PanelHeader text=\"English Clash\" showBackButton={false} />\n      {user && (\n        <Group>\n          <Cell\n            before={user.photoUrl ? <Avatar src={user.photoUrl} /> : null}\n            description={\n              <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <span>Количество очков - {user.score}</span>{' '}\n                <span>Место в рейтинге: {user.foreverRank}</span>\n              </div>\n            }\n            multiline\n          >\n            {`${user.firstName} ${user.lastName}`}\n          </Cell>\n        </Group>\n      )}\n\n      <Group>\n        <Div>\n          <Button size=\"xl\" onClick={onStartBattle} disabled={loading}>\n            Начать!\n          </Button>\n        </Div>\n      </Group>\n\n      {user && (\n        <Group>\n          <Cell\n            multiline\n            indicator={\n              <Switch\n                checked={\n                  user.notificationsStatus === NOTIFICATIONS_STATUSES.ALLOW\n                }\n                onChange={onSwitchNotifications}\n                disabled={loading}\n              />\n            }\n          >\n            Уведомления об обновлениях\n          </Cell>\n        </Group>\n      )}\n      {loading && <Loader />}\n    </>\n  )\n}\n\nHome.propTypes = {\n  onStartBattle: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    photoUrl: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    foreverRank: PropTypes.number.isRequired,\n    monthlyRank: PropTypes.number.isRequired,\n    notificationsStatus: PropTypes.string.isRequired,\n  }),\n  onUpdateUser: PropTypes.func.isRequired,\n}\n\nHome.defaultProps = {\n  user: null,\n}\n\nexport default Home\n","import { ApiService } from '../core/ApiService'\n\nexport class QuestionService {\n  static createFullPictureUrl(relativeUrl: string): string {\n    const relativeUrlWithoutSlash = QuestionService.removePrecedingSlash(\n      relativeUrl\n    )\n    return ApiService.createFullUrl(relativeUrlWithoutSlash)\n  }\n\n  static removePrecedingSlash(url: string): string {\n    return url.startsWith('/') ? url.slice(1) : url\n  }\n}\n","import React from 'react'\nimport Div from '@vkontakte/vkui/dist/components/Div/Div'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport './Question.css'\nimport clsx from 'clsx'\nimport { QuestionInstance } from '../models/question-model'\nimport { GAME_TYPES } from '../constants'\nimport { QuestionService } from './QuestionService'\nimport { Group } from '@vkontakte/vkui'\n\ninterface Props {\n  question: QuestionInstance\n  gameType: string\n  onSelectAnswer(answer: string)\n}\n\nconst renderQuestionMap = {\n  [GAME_TYPES.WORD]: (questionWord: string) => (\n    <>\n      <p>Слово на английском: {questionWord}</p>\n      <p>Выбери его перевод на русский:</p>\n    </>\n  ),\n  [GAME_TYPES.PICTURE]: (imagePath: string) => (\n    <div className=\"picture-question\">\n      <img\n        src={QuestionService.createFullPictureUrl(imagePath)}\n        alt=\"Картинка с вопросом\"\n      />\n      <span>Это -</span>\n    </div>\n  ),\n}\n\nfunction Question({ question, gameType, onSelectAnswer }: Props): JSX.Element {\n  const {\n    answerWords,\n    selectedAnswer,\n    isCorrect,\n    correctAnswer,\n    question: questionString,\n  } = question\n  const renderQuestion = renderQuestionMap[gameType]\n  return (\n    <Div>\n      <Group>{renderQuestion(questionString)}</Group>\n      {answerWords.map((answer) => {\n        const isCorrectAnswer = answer === correctAnswer\n        const isFailure = !isCorrect && answer === selectedAnswer\n        const classes = clsx('answer-button', {\n          correct: isCorrectAnswer,\n          failure: isFailure,\n        })\n        return (\n          <Button\n            key={answer}\n            size=\"xl\"\n            mode=\"primary\"\n            stretched\n            className={classes}\n            onClick={() => !selectedAnswer && onSelectAnswer(answer)}\n          >\n            {answer}\n          </Button>\n        )\n      })}\n    </Div>\n  )\n}\n\nexport default Question\n","import { GameInstance } from '../../models/game-model'\nimport { QuestionInstance } from '../../models/question-model'\n\nexport const battleActions = {\n  setBattle: 'setBattle',\n  updateQuestion: 'updateQuestion',\n  goToNextQuestion: 'goToNextQuestion',\n}\n\nexport const initialState = {\n  battle: null,\n  activeQuestion: null,\n  hasNextQuestion: false,\n}\n\nexport function battleReducer(\n  state = initialState,\n  action: {\n    type: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    payload?: any\n  }\n): {\n  battle: null | GameInstance\n  activeQuestion: null | QuestionInstance\n  hasNextQuestion: boolean\n} {\n  switch (action.type) {\n    case battleActions.setBattle: {\n      const battle = action.payload\n      const { questions } = battle\n      return {\n        ...state,\n        battle,\n        activeQuestion: questions[0],\n        hasNextQuestion: questions.length > 1,\n      }\n    }\n    case battleActions.updateQuestion: {\n      const updatedQuestion = action.payload\n      const currentQuestions = state.battle.questions\n      const questionIndex = currentQuestions.findIndex(\n        ({ id }) => id === updatedQuestion.id\n      )\n      const questions = [\n        ...currentQuestions.slice(0, questionIndex),\n        updatedQuestion,\n        ...currentQuestions.slice(questionIndex + 1),\n      ]\n      return {\n        ...state,\n        battle: {\n          ...state.battle,\n          questions,\n        },\n        activeQuestion: updatedQuestion,\n      }\n    }\n    case battleActions.goToNextQuestion: {\n      const currentQuestions = state.battle.questions\n      const activeQuestionIndex = currentQuestions.findIndex(\n        ({ id }) => id === state.activeQuestion.id\n      )\n      if (activeQuestionIndex === currentQuestions.length - 1) {\n        throw new Error('Вы уже на последнем вопросе')\n      }\n      const newQuestionIndex = activeQuestionIndex + 1\n      return {\n        ...state,\n        activeQuestion: currentQuestions[newQuestionIndex],\n        hasNextQuestion: newQuestionIndex < currentQuestions.length - 1,\n      }\n    }\n    default:\n      return state\n  }\n}\n","import React, { useEffect, useReducer, useState } from 'react'\nimport PanelHeader from '../helpers/PanelHeader'\nimport { BattleService } from './BattleService'\nimport Question from '../Question'\nimport { Utils } from '../../Utils'\nimport { battleActions, battleReducer, initialState } from './battle-reducer'\nimport Loader from '../helpers/Loader'\nimport { GameInstance } from '../../models/game-model'\n\nconst WAIT_TIME_TO_SHOW_CORRECT_ANSWER = 1000\n\ninterface PropTypes {\n  gameType?: string\n  onGoBack()\n  onFinishGame(game: GameInstance)\n}\n\nconst Battle = ({\n  onGoBack,\n  onFinishGame,\n  gameType = null,\n}: PropTypes): JSX.Element => {\n  const [loading, setLoading] = useState(false)\n  const [state, dispatch] = useReducer(battleReducer, initialState)\n  const { battle, activeQuestion, hasNextQuestion } = state\n\n  useEffect(() => {\n    const startBattle = async () => {\n      setLoading(true)\n      try {\n        const fetchedBattle = await BattleService.startBattle(gameType)\n        dispatch({\n          type: battleActions.setBattle,\n          payload: fetchedBattle,\n        })\n      } finally {\n        setLoading(false)\n      }\n    }\n    if (gameType) startBattle()\n  }, [gameType])\n\n  const onSelectAnswer = async (answer: string) => {\n    if (loading) return\n    const questionToSubmit = activeQuestion.set('selectedAnswer', answer)\n    setLoading(true)\n    try {\n      const questionWithAnswerData = await BattleService.submitQuestion(\n        questionToSubmit\n      )\n      dispatch({\n        type: battleActions.updateQuestion,\n        payload: questionWithAnswerData,\n      })\n    } finally {\n      setLoading(false)\n    }\n\n    await Utils.waitForTimeout(WAIT_TIME_TO_SHOW_CORRECT_ANSWER)\n\n    if (hasNextQuestion) dispatch({ type: battleActions.goToNextQuestion })\n    else onFinishGame(battle)\n  }\n\n  return (\n    <>\n      <PanelHeader onBackButtonClick={onGoBack} text=\"Игра\" />\n      {activeQuestion && (\n        <Question\n          question={activeQuestion}\n          onSelectAnswer={onSelectAnswer}\n          gameType={gameType}\n        />\n      )}\n      {loading && <Loader />}\n    </>\n  )\n}\n\nexport default Battle\n","import React, { useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport PanelHeader from '../helpers/PanelHeader'\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell'\nimport Counter from '@vkontakte/vkui/dist/components/Counter/Counter'\nimport Group from '@vkontakte/vkui/dist/components/Group/Group'\nimport Header from '@vkontakte/vkui/dist/components/Header/Header'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport './Results.css'\nimport Icon24Home from '@vkontakte/icons/dist/24/home'\nimport Icon24Replay from '@vkontakte/icons/dist/24/replay'\nimport { NOTIFICATIONS_STATUSES } from '../../constants'\nimport { AppService } from '../AppService'\nimport { Card, CardGrid, Div } from '@vkontakte/vkui'\nimport Loader from '../helpers/Loader'\n\nfunction Results({\n  user,\n  onGoBack,\n  battle,\n  onRetry,\n  onUpdateUser,\n}: InferProps<typeof Results.propTypes>): JSX.Element {\n  const { questions, points } = battle\n  const correctAnswersNumber = questions.filter(({ isCorrect }) => isCorrect)\n    .length\n  const incorrectAnswersNumber = questions.length - correctAnswersNumber\n  const [rejectedNotifications, setRejectedNotifications] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  const showNotificationsRequest =\n    user.notificationsStatus === NOTIFICATIONS_STATUSES.TO_BE_REQUESTED\n\n  const navigationButtons = (\n    <div className=\"action-buttons-wrapper\">\n      <Button onClick={onGoBack} size=\"l\" before={<Icon24Home />}>\n        Домой\n      </Button>\n      <Button onClick={onRetry} size=\"l\" before={<Icon24Replay />}>\n        Еще раз\n      </Button>\n    </div>\n  )\n\n  const notificationRequest = (\n    <CardGrid style={{ marginTop: '10px' }}>\n      <Card size=\"l\" style={{ padding: '10px' }}>\n        <div className=\"notification-request-content\">\n          <span className=\"notification-request-header\">\n            Узнай первым об обновлениях - подпишись на уведомления!\n          </span>\n          <div className=\"notification-buttons-wrapper\">\n            <Button\n              size=\"m\"\n              mode=\"commerce\"\n              className=\"notification-button\"\n              onClick={async () => {\n                setLoading(true)\n                try {\n                  const updatedUser = await AppService.requestNotifications()\n                  onUpdateUser(updatedUser)\n                  if (\n                    updatedUser.notificationsStatus ===\n                    NOTIFICATIONS_STATUSES.BLOCK\n                  ) {\n                    // if user clicked subscribe, but rejected in VK popup\n                    setRejectedNotifications(true)\n                  }\n                } finally {\n                  setLoading(false)\n                }\n              }}\n              disabled={loading}\n            >\n              Подписаться\n            </Button>\n            <Button\n              size=\"m\"\n              mode=\"secondary\"\n              className=\"notification-button\"\n              onClick={async () => {\n                setLoading(true)\n                onUpdateUser(await AppService.blockNotifications())\n                setLoading(false)\n                setRejectedNotifications(true)\n              }}\n              disabled={loading}\n            >\n              Не сейчас\n            </Button>\n          </div>\n          <span className=\"notification-request-subtext\">\n            Всегда можно отписаться на главном экране\n          </span>\n        </div>\n      </Card>\n    </CardGrid>\n  )\n  return (\n    <>\n      <PanelHeader text=\"Результаты\" onBackButtonClick={onGoBack} />\n      <Group header={<Header mode=\"secondary\">Статистика</Header>}>\n        <Cell\n          indicator={<Counter mode=\"primary\">{correctAnswersNumber}</Counter>}\n        >\n          Верных ответов:\n        </Cell>\n        <Cell\n          indicator={<Counter mode=\"primary\">{incorrectAnswersNumber}</Counter>}\n        >\n          Неверных ответов:\n        </Cell>\n        <Cell indicator={<Counter mode=\"primary\">{points}</Counter>}>\n          Получено очков:\n        </Cell>\n      </Group>\n      {!showNotificationsRequest && navigationButtons}\n      {showNotificationsRequest && notificationRequest}\n      {rejectedNotifications && (\n        <Div className=\"subscribe-later\">\n          Подписаться можно на главном экране\n        </Div>\n      )}\n      {loading && <Loader />}\n    </>\n  )\n}\n\nResults.propTypes = {\n  user: PropTypes.shape({\n    photoUrl: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    foreverRank: PropTypes.number.isRequired,\n    monthlyRank: PropTypes.number.isRequired,\n    notificationsStatus: PropTypes.string.isRequired,\n  }),\n  onGoBack: PropTypes.func.isRequired,\n  onRetry: PropTypes.func.isRequired,\n  battle: PropTypes.shape({\n    points: PropTypes.number.isRequired,\n    questions: PropTypes.arrayOf(\n      PropTypes.shape({\n        isCorrect: PropTypes.bool.isRequired,\n      })\n    ).isRequired,\n  }),\n  onUpdateUser: PropTypes.func.isRequired,\n}\n\nResults.defaultProps = {\n  user: null,\n  battle: null,\n}\n\nexport default Results\n","import tcomb from 'tcomb'\nimport { ID, PositiveNumber } from '../core/tcomb-types'\nimport { createModel, ModelInstance } from '../core/model-utils'\n\nconst attributes = {\n  id: ID,\n  firstName: tcomb.String,\n  lastName: tcomb.String,\n  photoUrl: tcomb.String,\n  score: PositiveNumber,\n}\n\nexport interface ScoreboardUserInstance extends ModelInstance {\n  id: number\n  firstName: string\n  lastName: string\n  photoUrl: string\n  score: number\n}\n\nexport class ScoreboardUser extends createModel<ScoreboardUserInstance>(\n  attributes,\n  'ScoreboardUser'\n) {}\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { Avatar, Counter, SimpleCell } from '@vkontakte/vkui'\n\nfunction ScoreboardItem({\n  rank,\n  score,\n  photoUrl,\n  firstName,\n  lastName,\n}: InferProps<typeof ScoreboardItem.propTypes>): JSX.Element {\n  return (\n    <SimpleCell before={<Counter>{rank}</Counter>} after={score}>\n      <div className=\"scoreboard-item\">\n        <Avatar size={40} src={photoUrl} />\n        <div className=\"scoreboard-item-name\">\n          {firstName} {lastName}\n        </div>\n      </div>\n    </SimpleCell>\n  )\n}\n\nScoreboardItem.propTypes = {\n  rank: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  photoUrl: PropTypes.string.isRequired,\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n\nexport default ScoreboardItem\n","import React, { useEffect, useState } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport PanelHeader from '../helpers/PanelHeader'\nimport { ApiService } from '../../core/ApiService'\nimport { Div, FixedLayout, Group, List, Tabs, TabsItem } from '@vkontakte/vkui'\nimport { ScoreboardUser } from '../../models/scoreboard-user-model'\nimport './ScoreboardHome.css'\nimport ScoreboardItem from './ScoreboardItem'\nimport Loader from '../helpers/Loader'\n\nconst SCOREBOARD_TYPES = {\n  forever: 'forever',\n  monthly: 'monthly',\n}\n\nfunction ScoreboardHome({\n  user,\n}: InferProps<typeof ScoreboardHome.propTypes>): JSX.Element {\n  const [usersList, setUsersList] = useState<ScoreboardUser[]>([])\n  const [loading, setLoading] = useState(false)\n  const [activeTab, setActiveTab] = useState(SCOREBOARD_TYPES.forever)\n  const [currentUserInScoreboard, setCurrentUserInScoreboard] = useState(false)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setUsersList([])\n      setLoading(true)\n      const users = await ApiService.get<ScoreboardUser[]>(\n        `${activeTab}_scoreboard`\n      )\n      const currentScoreboardUser = ScoreboardUser.fromObject(user)\n      setCurrentUserInScoreboard(\n        Boolean(users.find(({ id }) => id === currentScoreboardUser.id))\n      )\n      setUsersList(users)\n      setLoading(false)\n    }\n\n    fetchData()\n  }, [activeTab, user])\n\n  return (\n    <>\n      <PanelHeader text=\"Рейтинг\" showBackButton={false} />\n      <FixedLayout vertical=\"top\">\n        <Tabs>\n          <TabsItem\n            selected={activeTab === SCOREBOARD_TYPES.forever}\n            onClick={() => setActiveTab(SCOREBOARD_TYPES.forever)}\n          >\n            За все время\n          </TabsItem>\n          <TabsItem\n            selected={activeTab === SCOREBOARD_TYPES.monthly}\n            onClick={() => setActiveTab(SCOREBOARD_TYPES.monthly)}\n          >\n            За месяц\n          </TabsItem>\n        </Tabs>\n      </FixedLayout>\n      <Div>\n        <Group style={{ paddingTop: '20px' }}>\n          {!loading && (\n            <List>\n              {usersList.map(\n                ({ id, firstName, lastName, photoUrl, score }, index) => (\n                  <ScoreboardItem\n                    rank={index + 1}\n                    score={score}\n                    photoUrl={photoUrl}\n                    firstName={firstName}\n                    lastName={lastName}\n                    key={id}\n                  />\n                )\n              )}\n              {!currentUserInScoreboard && (\n                <ScoreboardItem\n                  rank={\n                    activeTab === SCOREBOARD_TYPES.forever\n                      ? user.foreverRank\n                      : user.monthlyRank\n                  }\n                  score={user.score}\n                  photoUrl={user.photoUrl}\n                  firstName={user.firstName}\n                  lastName={user.lastName}\n                />\n              )}\n            </List>\n          )}\n          {loading && <Loader />}\n        </Group>\n      </Div>\n    </>\n  )\n}\n\nScoreboardHome.propTypes = {\n  user: PropTypes.shape({\n    photoUrl: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    lastName: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    foreverRank: PropTypes.number.isRequired,\n    monthlyRank: PropTypes.number.isRequired,\n    notificationsStatus: PropTypes.string.isRequired,\n  }),\n}\n\nScoreboardHome.defaultProps = {\n  user: null,\n}\n\nexport default ScoreboardHome\n","import React from 'react'\nimport PanelHeader from '../helpers/PanelHeader'\nimport { Button, Div, Header } from '@vkontakte/vkui'\nimport { GAME_TYPES } from '../../constants'\nimport './ChooseGameType.css'\n\ninterface Props {\n  onGoBack(): void\n  onChoose(type: string): void\n}\n\nfunction ChooseGameType({ onGoBack, onChoose }: Props): JSX.Element {\n  return (\n    <>\n      <PanelHeader text=\"Тип игры\" onBackButtonClick={onGoBack} />\n      <Div>\n        <Header mode=\"primary\">Выбери тип игры:</Header>\n        <div className=\"choose-game-type-body\">\n          <Button size=\"l\" onClick={() => onChoose(GAME_TYPES.PICTURE)}>\n            Картинка\n          </Button>\n          <Button size=\"l\" onClick={() => onChoose(GAME_TYPES.WORD)}>\n            Перевод\n          </Button>\n        </div>\n      </Div>\n    </>\n  )\n}\n\nexport default ChooseGameType\n","import React, { useEffect, useState } from 'react'\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner'\nimport Alert from '@vkontakte/vkui/dist/components/Alert/Alert'\nimport '@vkontakte/vkui/dist/vkui.css'\nimport { AppService } from './AppService'\nimport './constant-styles.css'\nimport { Utils } from '../Utils'\nimport * as Sentry from '@sentry/react'\nimport './App.css'\nimport { initTracker, reachGoal } from '../core/tracker'\nimport { Epic, Panel, Tabbar, TabbarItem, View } from '@vkontakte/vkui'\nimport { GameInstance } from '../models/game-model'\nimport { BattleService } from './panels/BattleService'\nimport Home from './panels/Home'\nimport Battle from './panels/Battle'\nimport Results from './panels/Results'\nimport { Icon28HomeOutline, Icon28UsersOutline } from '@vkontakte/icons'\nimport ScoreboardHome from './panels/ScoreboardHome'\nimport { NOTIFICATIONS_STATUSES } from '../constants'\nimport { UserInstance } from '../core/user-model'\nimport ChooseGameType from './panels/ChooseGameType'\n\nconst App = (): JSX.Element => {\n  const [user, setUser] = useState<UserInstance>(null)\n  const [popout, setPopout] = useState(<ScreenSpinner />)\n  const [activeStory, setActiveStory] = useState('game')\n  const [activePanel, setActivePanel] = useState('home')\n  const [battle, setBattle] = useState(null)\n  const [gameType, setGameType] = useState<string>(null)\n\n  useEffect(() => {\n    if (Utils.isProductionMode) {\n      Sentry.init({\n        dsn: process.env.REACT_APP_SENTRY_DSN,\n        beforeSend(event, hint) {\n          if (event.exception) {\n            const errorMessage =\n              hint &&\n              hint.originalException &&\n              hint.originalException instanceof Error &&\n              hint.originalException.message\n                ? hint.originalException.message\n                : ''\n            setPopout(\n              <Alert\n                actions={[\n                  {\n                    mode: 'default',\n                    title: 'ОК',\n                    autoclose: true,\n                  },\n                ]}\n                onClose={() => setPopout(null)}\n              >\n                <h2>Возникла ошибка =(</h2>\n                {errorMessage && (\n                  <p className=\"error-message\">{errorMessage}</p>\n                )}\n                <p>Попробуй еще раз</p>\n              </Alert>\n            )\n          }\n          return event\n        },\n      })\n    }\n    initTracker()\n  }, [])\n\n  async function fetchUser(isInitialRequest: boolean) {\n    try {\n      const fetchedUser = await AppService.fetchUserData()\n      setUser(fetchedUser)\n      if (isInitialRequest) {\n        if (\n          fetchedUser.notificationsStatus === NOTIFICATIONS_STATUSES.ALLOW &&\n          !AppService.areNotificationsEnabledOnVkSide\n        ) {\n          setUser(await AppService.blockNotifications())\n        }\n      }\n    } finally {\n      setPopout(null)\n    }\n  }\n\n  useEffect(() => {\n    fetchUser(true)\n  }, [])\n\n  const onFinishGame = async (localBattle: GameInstance) => {\n    const updatedBattle = await BattleService.getBattle(localBattle.id)\n    setBattle(updatedBattle)\n    setActivePanel('results')\n    reachGoal('finish-game')\n    fetchUser(false)\n  }\n\n  const goToHomePanel = () => setActivePanel('home')\n\n  const goToChooseGameTypePanel = () => {\n    setActivePanel('choose-game-type')\n  }\n\n  const onStartBattle = (chosenGameType?: string) => {\n    if (chosenGameType) setGameType(chosenGameType)\n    setActivePanel('battle')\n    reachGoal('start-game')\n  }\n\n  const onOpenScoreboard = () => {\n    setActiveStory('scoreboard')\n    setActivePanel('scoreboard-home')\n  }\n\n  return (\n    <Epic\n      activeStory={activeStory}\n      tabbar={\n        <Tabbar>\n          <TabbarItem\n            text=\"Главная\"\n            selected={activeStory === 'game'}\n            onClick={() => {\n              setActiveStory('game')\n              setActivePanel('home')\n            }}\n          >\n            <Icon28HomeOutline />\n          </TabbarItem>\n          <TabbarItem\n            text=\"Рейтинг\"\n            selected={activeStory === 'scoreboard'}\n            onClick={onOpenScoreboard}\n          >\n            <Icon28UsersOutline />\n          </TabbarItem>\n        </Tabbar>\n      }\n    >\n      <View id=\"game\" activePanel={activePanel} popout={popout}>\n        <Panel id=\"home\">\n          <Home\n            user={user}\n            onStartBattle={goToChooseGameTypePanel}\n            onUpdateUser={(updatedUser) => setUser(updatedUser)}\n          />\n        </Panel>\n        <Panel id=\"choose-game-type\">\n          <ChooseGameType onGoBack={goToHomePanel} onChoose={onStartBattle} />\n        </Panel>\n        <Panel id=\"battle\">\n          <Battle\n            onGoBack={goToChooseGameTypePanel}\n            onFinishGame={onFinishGame}\n            gameType={gameType}\n          />\n        </Panel>\n        <Panel id=\"results\">\n          <Results\n            user={user}\n            onRetry={() => onStartBattle(null)}\n            onGoBack={goToHomePanel}\n            battle={battle}\n            onUpdateUser={(updatedUser) => setUser(updatedUser)}\n          />\n        </Panel>\n      </View>\n      <View id=\"scoreboard\" activePanel={activePanel} popout={popout}>\n        <Panel id=\"scoreboard-home\">\n          <ScoreboardHome user={user} />\n        </Panel>\n      </View>\n    </Epic>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport * as Sentry from '@sentry/react'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport { Utils } from '../Utils'\n\n/**\n * Component catches only errors in rendering phase and lifecycle\n * Error in click and async handlers need to be caught and rendered separately\n */\nexport function ErrorBoundary({\n  children,\n}: InferProps<typeof ErrorBoundary.propTypes>): JSX.Element {\n  if (!Utils.isProductionMode) return children\n\n  return (\n    <Sentry.ErrorBoundary\n      fallback={({ error, componentStack, resetError }) => (\n        <>\n          <div>Ошибка отрисовки:</div>\n          <p>{error.message}</p>\n          <p>{componentStack}</p>\n          <Button onClick={resetError}>Попробовать еще раз</Button>\n        </>\n      )}\n    >\n      {children}\n    </Sentry.ErrorBoundary>\n  )\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.element.isRequired,\n}\n","import 'core-js/features/map'\nimport 'core-js/features/set'\nimport React from 'react'\nimport { render as renderReact } from 'react-dom'\nimport bridge from '@vkontakte/vk-bridge'\nimport App from './components/App'\nimport { Utils } from './Utils'\nimport { ErrorBoundary } from './components/ErrorBoundary'\n\n// Init VK  Mini App\nbridge.send('VKWebAppInit')\n\nbridge.subscribe(({ detail: { type, data } }) => {\n  if (type === 'VKWebAppUpdateConfig') {\n    const schemeAttribute = document.createAttribute('scheme')\n    // @ts-ignore\n    schemeAttribute.value = data.scheme || 'client_light'\n    document.body.attributes.setNamedItem(schemeAttribute)\n  }\n})\n\nfunction render() {\n  renderReact(\n    <React.StrictMode>\n      <ErrorBoundary>\n        <App />\n      </ErrorBoundary>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\nrender()\n\nif (!Utils.isProductionMode) {\n  if (module.hot) {\n    module.hot.accept('./components/App', render)\n  }\n\n  import('./eruda')\n}\n"],"sourceRoot":""}